#
# Copyright 1999-2007 Sun Microsystems, Inc.  All Rights Reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# Copyright 2010 netlabs.org. OS/2 parts
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Sun designates this
# particular file as subject to the "Classpath" exception as provided
# by Sun in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
# CA 95054 USA or visit www.sun.com if you need additional information or
# have any questions.
#

#
# Makefile to specify compiler flags for programs and libraries
# targeted to Windows builds.  Should not contain any rules.
#
# WARNING: This file is shared with other workspaces.
#          So when it includes other files, it must use JDK_TOPDIR.
#

# Get shared JDK settings
include $(JDK_MAKE_SHARED_DIR)/Defs.gmk

# LIB_LOCATION, which for OS/2 identifies where .exe files go, may be
# set by each GNUmakefile. The default is BINDIR.
ifndef LIB_LOCATION
  LIB_LOCATION = $(BINDIR)
endif # LIB_LOCATION

# Part of INCREMENTAL_BUILD mechanism.
#   Compiler emits things like:  file.obj: file.c file.h...
#   We want something like: obj_path/file.obj: file.c file.h...
CC_DEPEND	 = -MM -MT $(@:$(suffix $@)=.$(OBJECT_SUFFIX))
CC_DEPEND_FILTER =

ifndef PLATFORM_SRC
  # We mostly reuse the windows code so far.
  PLATFORM_SRC  = $(BUILDDIR)/../src/windows
endif # PLATFORM_SRC

# Platform specific closed sources
ifndef OPENJDK
  ifndef CLOSED_PLATFORM_SRC
    CLOSED_PLATFORM_SRC  = $(BUILDDIR)/../src/closed/os2
  endif
endif

# platform specific include files
PLATFORM_INCLUDE_NAME = os2
PLATFORM_INCLUDE      = $(INCLUDEDIR)/$(PLATFORM_INCLUDE_NAME)

# suffix used for make dependencies files.
DEPEND_SUFFIX = dep
# The suffix applied to the library name for FDLIBM
FDDLIBM_SUFFIX = lib
# The suffix applied to scripts (.bat for windows, nothing for unix)
SCRIPT_SUFFIX = cmd
# CC compiler object code output directive flag value
CC_OBJECT_OUTPUT_FLAG = -o #trailing blank required!
CC_PROGRAM_OUTPUT_FLAG = -o #trailing blank required!

#
# Default HPI libraries. Build will build only native, unless
# overriden at the make command line. This makes it convenient for
# people doing, say, a pthreads port -- they can create a posix
# directory here, and say "gnumake HPIS=posix" at the top
# level.
#
HPIS = windows

#
# Default optimization
#
CC_HIGHEST_OPT = -O3
CC_HIGHER_OPT  = -O3
CC_LOWER_OPT   = -O2
CC_NO_OPT      =

ifeq ($(PRODUCT), java)
    _OPT = $(CC_HIGHER_OPT)
else
    _OPT = $(CC_LOWER_OPT)
    CPPFLAGS_DBG    += -DLOGGING
endif

# If NO_OPTIMIZATIONS is defined in the environment, turn all optimzations off
ifdef NO_OPTIMIZATIONS
  CC_HIGHEST_OPT = $(CC_NO_OPT)
  CC_HIGHER_OPT  = $(CC_NO_OPT)
  CC_LOWER_OPT   = $(CC_NO_OPT)
endif

#
# Selection of warning messages
#
GCC_INHIBIT	= -Wno-unused -Wno-parentheses
GCC_STYLE	=
GCC_WARNINGS	= -W -Wall $(GCC_STYLE) $(GCC_INHIBIT)

#
# Treat compiler warnings as errors, if warnings not allowed
#
ifeq ($(COMPILER_WARNINGS_FATAL),true)
  GCC_WARNINGS += -Werror
endif

#
# Misc compiler options
#
CFLAGS_COMMON   = $(GCC_WARNINGS) -march=i486 -mtune=generic
CFLAGS_OPT      = -s $(POPT)
CFLAGS_DBG      = -g

CXXFLAGS_COMMON = -DCC_NOEX $(CFLAGS_COMMON)
CXXFLAGS_OPT	= $(CFLAGS_OPT)
CXXFLAGS_DBG	= $(CFLAGS_DBG)

#
# Preprocessor macro definitions
#
CPPFLAGS_COMMON = -D$(ARCH) -DARCH='"$(ARCH)"' -DOS2 $(VERSION_DEFINES)
CPPFLAGS_OPT    =
CPPFLAGS_DBG    = -DDEBUG

#
# Linker options
#
LDFLAGS_COMMON  = -Zomf -Zmap -Zstack 0x2000 -Zlinker "DISABLE 1121" -Zhigh-mem
LDFLAGS_OPT     = -s
LDFLAGS_DBG     =

#
# Additional libraries needed by all targets
#

# Note: No -DSTRICT as it makes HANDLE and HFILE non-polymorphic in C++ code
# which breaks things like HANDLE file = CreateFile()
CPPFLAGS_COMMON += -D__WIN32OS2__ -D__i386__ -D_POSIX_SOURCE \
                   -D_POSIX_C_SOURCE=200112 -D_EMX_SOURCE -D_XOPEN_SOURCE=600 \
				   -D_SVID_SOURCE
CPPFLAGS_COMMON += -I$(ODINSDK_PATH)/include/Win -I$(ODINSDK_PATH)/include
LDFLAGS_COMMON  += -L$(ODINSDK_PATH)/lib -L$(ODINSDK_PATH)/lib/Release \
				   -lkernel32.lib -luser32.lib

#
# Path and option to link against the VM, if you have to.
#
JVMLIB = $(LIBDIR)/jvm.lib
JAVALIB = $(LIBDIR)/java.lib

LIBRARY_SUFFIX = dll
LIB_SUFFIX     = lib

# Settings for the JDI - Serviceability Agent binding.
HOTSPOT_SALIB_PATH   = $(HOTSPOT_IMPORT_PATH)/jre/bin
SALIB_NAME = $(LIB_PREFIX)sawindbg.$(LIBRARY_SUFFIX)
SAMAP_NAME = $(LIB_PREFIX)sawindbg.map

# SA is not supported so far.
INCLUDE_SA = false

