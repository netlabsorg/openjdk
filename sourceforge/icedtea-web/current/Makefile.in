# Makefile.in generated by automake 1.13.4 from Makefile.am.
# @configure_input@

# Copyright (C) 1994-2013 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

# Source directories
VPATH = @srcdir@
am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
@HAVE_TAGSOUP_FALSE@am__append_1 = net.sourceforge.jnlp.MalformedXMLParser.java
subdir = .
DIST_COMMON = $(srcdir)/Makefile.in $(srcdir)/Makefile.am \
	$(top_srcdir)/configure $(am__configure_deps) \
	$(srcdir)/netx.manifest.in $(srcdir)/javac.in \
	$(srcdir)/jrunscript.in $(srcdir)/build.properties.in AUTHORS \
	COPYING ChangeLog INSTALL NEWS README config.guess config.sub \
	install-sh missing
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \
 configure.lineno config.status.lineno
mkinstalldirs = $(install_sh) -d
CONFIG_CLEAN_FILES = netx.manifest javac jrunscript build.properties
CONFIG_CLEAN_VPATH_FILES =
AM_V_P = $(am__v_P_@AM_V@)
am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_@AM_V@)
am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_@AM_V@)
am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
am__v_at_0 = @
am__v_at_1 = 
SOURCES =
DIST_SOURCES =
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
distdir = $(PACKAGE)-$(VERSION)
top_distdir = $(distdir)
am__remove_distdir = \
  if test -d "$(distdir)"; then \
    find "$(distdir)" -type d ! -perm -200 -exec chmod u+w {} ';' \
      && rm -rf "$(distdir)" \
      || { sleep 5 && rm -rf "$(distdir)"; }; \
  else :; fi
am__post_remove_distdir = $(am__remove_distdir)
DIST_ARCHIVES = $(distdir).tar.gz
GZIP_ENV = --best
DIST_TARGETS = dist-gzip
distuninstallcheck_listfiles = find . -type f -print
am__distuninstallcheck_listfiles = $(distuninstallcheck_listfiles) \
  | sed 's|^\./|$(prefix)/|' | grep -v '$(infodir)/dir$$'
distcleancheck_listfiles = find . -type f -print
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
ARCHFLAG = @ARCHFLAG@
ARCH_PREFIX = @ARCH_PREFIX@
ASM_AVAILABLE = @ASM_AVAILABLE@
ASM_JAR = @ASM_JAR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
BIN_BASH = @BIN_BASH@
BROWSER_TESTS_MODIFICATION = @BROWSER_TESTS_MODIFICATION@
BUILD_ARCH_DIR = @BUILD_ARCH_DIR@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CHROME = @CHROME@
CHROMIUM = @CHROMIUM@
CPPFLAGS = @CPPFLAGS@
CXX = @CXX@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
ECJ = @ECJ@
ECJ_JAR = @ECJ_JAR@
EMMA_AVAILABLE = @EMMA_AVAILABLE@
EMMA_JAR = @EMMA_JAR@
EPIPHANY = @EPIPHANY@
EXEEXT = @EXEEXT@
FIREFOX = @FIREFOX@
FULL_VERSION = @FULL_VERSION@
GCJ = @GCJ@
GLIB2_V_216_CFLAGS = @GLIB2_V_216_CFLAGS@
GLIB2_V_216_LIBS = @GLIB2_V_216_LIBS@
GLIB_CFLAGS = @GLIB_CFLAGS@
GLIB_LIBS = @GLIB_LIBS@
HG = @HG@
ICEDTEA_REVISION = @ICEDTEA_REVISION@
INSTALL = @INSTALL@
INSTALL_ARCH_DIR = @INSTALL_ARCH_DIR@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
JACOCO_AVAILABLE = @JACOCO_AVAILABLE@
JACOCO_JAR = @JACOCO_JAR@
JAR = @JAR@
JARSIGNER = @JARSIGNER@
JAR_ACCEPTS_STDIN_LIST = @JAR_ACCEPTS_STDIN_LIST@
JAR_KNOWS_ATFILE = @JAR_KNOWS_ATFILE@
JAR_KNOWS_J_OPTIONS = @JAR_KNOWS_J_OPTIONS@
JAVA = @JAVA@
JAVAC = @JAVAC@
JAVADOC = @JAVADOC@
JAVADOC_KNOWS_J_OPTIONS = @JAVADOC_KNOWS_J_OPTIONS@
JRE_ARCH_DIR = @JRE_ARCH_DIR@
JUNIT_AVAILABLE = @JUNIT_AVAILABLE@
JUNIT_JAR = @JUNIT_JAR@
KEYTOOL = @KEYTOOL@
LDFLAGS = @LDFLAGS@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LTLIBOBJS = @LTLIBOBJS@
MAKEINFO = @MAKEINFO@
MIDORI = @MIDORI@
MKDIR_P = @MKDIR_P@
MOZILLA_CFLAGS = @MOZILLA_CFLAGS@
MOZILLA_LIBS = @MOZILLA_LIBS@
MOZILLA_VERSION_COLLAPSED = @MOZILLA_VERSION_COLLAPSED@
OBJEXT = @OBJEXT@
OPERA = @OPERA@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
PKGVERSION = @PKGVERSION@
PKG_CONFIG = @PKG_CONFIG@
PKG_CONFIG_LIBDIR = @PKG_CONFIG_LIBDIR@
PKG_CONFIG_PATH = @PKG_CONFIG_PATH@
RHINO_AVAILABLE = @RHINO_AVAILABLE@
RHINO_JAR = @RHINO_JAR@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
STRIP = @STRIP@
SYSTEM_JDK_DIR = @SYSTEM_JDK_DIR@
SYSTEM_JRE_DIR = @SYSTEM_JRE_DIR@
TAGSOUP_JAR = @TAGSOUP_JAR@
USING_ECJ = @USING_ECJ@
VERSION = @VERSION@
VERSION_DEFS = @VERSION_DEFS@
X11_CFLAGS = @X11_CFLAGS@
X11_LIBS = @X11_LIBS@
XSLTPROC = @XSLTPROC@
ZIP = @ZIP@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
@WITH_RHINO_FALSE@RHINO_RUNTIME = 
@WITH_RHINO_TRUE@RHINO_RUNTIME = :$(RHINO_JAR)
NETX_EXCLUDE_SRCS = $(am__append_1)

# Conditional defintions
@HAVE_TAGSOUP_TRUE@NETX_CLASSPATH_ARG = -classpath $(TAGSOUP_JAR)
@CP_SUPPORTS_REFLINK_TRUE@REFLINK = --reflink=auto
@SRC_DIR_HARDLINKABLE_FALSE@SRC_DIR_LINK = $(REFLINK)
@SRC_DIR_HARDLINKABLE_TRUE@SRC_DIR_LINK = -l
@ENABLE_DOCS_TRUE@JAVADOC_OPTS = -use -keywords -encoding UTF-8 -splitIndex \
@ENABLE_DOCS_TRUE@ -bottom '<font size="-1"> <a href="http://icedtea.classpath.org/bugzilla">Submit a bug or feature</a></font>'

@ENABLE_DOCS_TRUE@@JAVADOC_SUPPORTS_J_OPTIONS_TRUE@JAVADOC_MEM_OPTS = -J-Xmx1024m -J-Xms128m
@WITH_RHINO_FALSE@RHINO_TESTS = 
@WITH_RHINO_TRUE@RHINO_TESTS = stamps/check-pac-functions.stamp
@WITH_JUNIT_FALSE@JUNIT_TESTS = 
@WITH_JUNIT_TRUE@JUNIT_TESTS = stamps/run-netx-unit-tests.stamp
#end of exported autoconf copies

# binary names
javaws := $(shell echo javaws | sed '@program_transform_name@')
itweb_settings := $(shell echo itweb-settings | sed '@program_transform_name@')
policyeditor := $(shell echo policyeditor | sed '@program_transform_name@')

# the launcher needs to know $(bindir) and $(datadir) which can be different at
# make-time from configure-time
edit_launcher_script = sed \
  -e "s|[@]LAUNCHER_BOOTCLASSPATH[@]|$(LAUNCHER_BOOTCLASSPATH)|g" \
  -e "s|[@]JAVAWS_SPLASH_LOCATION[@]|$(datadir)/$(PACKAGE_NAME)/javaws_splash.png|g" \
  -e "s|[@]JAVA[@]|$(JAVA)|g" \
  -e "s|[@]JRE[@]|$(SYSTEM_JRE_DIR)|g" \
  -e "s|[@]MAIN_CLASS[@]|$${MAIN_CLASS}|g" \
  -e "s|[@]BIN_LOCATION[@]|$${BIN_LOCATION}|g" \
  -e "s|[@]PROGRAM_NAME[@]|$${PROGRAM_NAME}|g"


# Plugin

# IcedTeaPlugin.so.
# Separate compile and link invocations to ensure intermediate object
# is listed before -l options.  See:
# http://developer.mozilla.org/en/docs/XPCOM_Glue
@ENABLE_PLUGIN_TRUE@PLUGIN_SRC = IcedTeaNPPlugin.cc IcedTeaScriptablePluginObject.cc \
@ENABLE_PLUGIN_TRUE@        IcedTeaJavaRequestProcessor.cc IcedTeaPluginRequestProcessor.cc \
@ENABLE_PLUGIN_TRUE@		IcedTeaPluginUtils.cc IcedTeaParseProperties.cc

@ENABLE_PLUGIN_TRUE@PLUGIN_OBJECTS = IcedTeaNPPlugin.o IcedTeaScriptablePluginObject.o \
@ENABLE_PLUGIN_TRUE@        IcedTeaJavaRequestProcessor.o IcedTeaPluginRequestProcessor.o \
@ENABLE_PLUGIN_TRUE@		IcedTeaPluginUtils.o IcedTeaParseProperties.o

all: all-am

.SUFFIXES:
am--refresh: Makefile
	@:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      echo ' cd $(srcdir) && $(AUTOMAKE) --foreign'; \
	      $(am__cd) $(srcdir) && $(AUTOMAKE) --foreign \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    echo ' $(SHELL) ./config.status'; \
	    $(SHELL) ./config.status;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	$(SHELL) ./config.status --recheck

$(top_srcdir)/configure:  $(am__configure_deps)
	$(am__cd) $(srcdir) && $(AUTOCONF)
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	$(am__cd) $(srcdir) && $(ACLOCAL) $(ACLOCAL_AMFLAGS)
$(am__aclocal_m4_deps):
netx.manifest: $(top_builddir)/config.status $(srcdir)/netx.manifest.in
	cd $(top_builddir) && $(SHELL) ./config.status $@
javac: $(top_builddir)/config.status $(srcdir)/javac.in
	cd $(top_builddir) && $(SHELL) ./config.status $@
jrunscript: $(top_builddir)/config.status $(srcdir)/jrunscript.in
	cd $(top_builddir) && $(SHELL) ./config.status $@
build.properties: $(top_builddir)/config.status $(srcdir)/build.properties.in
	cd $(top_builddir) && $(SHELL) ./config.status $@
tags TAGS:

ctags CTAGS:

cscope cscopelist:


distdir: $(DISTFILES)
	$(am__remove_distdir)
	test -d "$(distdir)" || mkdir "$(distdir)"
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
	-test -n "$(am__skip_mode_fix)" \
	|| find "$(distdir)" -type d ! -perm -755 \
		-exec chmod u+rwx,go+rx {} \; -o \
	  ! -type d ! -perm -444 -links 1 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -400 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -444 -exec $(install_sh) -c -m a+r {} {} \; \
	|| chmod -R a+r "$(distdir)"
dist-gzip: distdir
	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
	$(am__post_remove_distdir)

dist-bzip2: distdir
	tardir=$(distdir) && $(am__tar) | BZIP2=$${BZIP2--9} bzip2 -c >$(distdir).tar.bz2
	$(am__post_remove_distdir)

dist-lzip: distdir
	tardir=$(distdir) && $(am__tar) | lzip -c $${LZIP_OPT--9} >$(distdir).tar.lz
	$(am__post_remove_distdir)

dist-xz: distdir
	tardir=$(distdir) && $(am__tar) | XZ_OPT=$${XZ_OPT--e} xz -c >$(distdir).tar.xz
	$(am__post_remove_distdir)

dist-tarZ: distdir
	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z
	$(am__post_remove_distdir)

dist-shar: distdir
	shar $(distdir) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).shar.gz
	$(am__post_remove_distdir)

dist-zip: distdir
	-rm -f $(distdir).zip
	zip -rq $(distdir).zip $(distdir)
	$(am__post_remove_distdir)

dist dist-all:
	$(MAKE) $(AM_MAKEFLAGS) $(DIST_TARGETS) am__post_remove_distdir='@:'
	$(am__post_remove_distdir)

# This target untars the dist file and tries a VPATH configuration.  Then
# it guarantees that the distribution is self-contained by making another
# tarfile.
distcheck: dist
	case '$(DIST_ARCHIVES)' in \
	*.tar.gz*) \
	  GZIP=$(GZIP_ENV) gzip -dc $(distdir).tar.gz | $(am__untar) ;;\
	*.tar.bz2*) \
	  bzip2 -dc $(distdir).tar.bz2 | $(am__untar) ;;\
	*.tar.lz*) \
	  lzip -dc $(distdir).tar.lz | $(am__untar) ;;\
	*.tar.xz*) \
	  xz -dc $(distdir).tar.xz | $(am__untar) ;;\
	*.tar.Z*) \
	  uncompress -c $(distdir).tar.Z | $(am__untar) ;;\
	*.shar.gz*) \
	  GZIP=$(GZIP_ENV) gzip -dc $(distdir).shar.gz | unshar ;;\
	*.zip*) \
	  unzip $(distdir).zip ;;\
	esac
	chmod -R a-w $(distdir)
	chmod u+w $(distdir)
	mkdir $(distdir)/_build $(distdir)/_inst
	chmod a-w $(distdir)
	test -d $(distdir)/_build || exit 0; \
	dc_install_base=`$(am__cd) $(distdir)/_inst && pwd | sed -e 's,^[^:\\/]:[\\/],/,'` \
	  && dc_destdir="$${TMPDIR-/tmp}/am-dc-$$$$/" \
	  && am__cwd=`pwd` \
	  && $(am__cd) $(distdir)/_build \
	  && ../configure --srcdir=.. --prefix="$$dc_install_base" \
	    $(AM_DISTCHECK_CONFIGURE_FLAGS) \
	    $(DISTCHECK_CONFIGURE_FLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) dvi \
	  && $(MAKE) $(AM_MAKEFLAGS) check \
	  && $(MAKE) $(AM_MAKEFLAGS) install \
	  && $(MAKE) $(AM_MAKEFLAGS) installcheck \
	  && $(MAKE) $(AM_MAKEFLAGS) uninstall \
	  && $(MAKE) $(AM_MAKEFLAGS) distuninstallcheck_dir="$$dc_install_base" \
	        distuninstallcheck \
	  && chmod -R a-w "$$dc_install_base" \
	  && ({ \
	       (cd ../.. && umask 077 && mkdir "$$dc_destdir") \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" install \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" uninstall \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" \
	            distuninstallcheck_dir="$$dc_destdir" distuninstallcheck; \
	      } || { rm -rf "$$dc_destdir"; exit 1; }) \
	  && rm -rf "$$dc_destdir" \
	  && $(MAKE) $(AM_MAKEFLAGS) dist \
	  && rm -rf $(DIST_ARCHIVES) \
	  && $(MAKE) $(AM_MAKEFLAGS) distcleancheck \
	  && cd "$$am__cwd" \
	  || exit 1
	$(am__post_remove_distdir)
	@(echo "$(distdir) archives ready for distribution: "; \
	  list='$(DIST_ARCHIVES)'; for i in $$list; do echo $$i; done) | \
	  sed -e 1h -e 1s/./=/g -e 1p -e 1x -e '$$p' -e '$$x'
distuninstallcheck:
	@test -n '$(distuninstallcheck_dir)' || { \
	  echo 'ERROR: trying to run $@ with an empty' \
	       '$$(distuninstallcheck_dir)' >&2; \
	  exit 1; \
	}; \
	$(am__cd) '$(distuninstallcheck_dir)' || { \
	  echo 'ERROR: cannot chdir into $(distuninstallcheck_dir)' >&2; \
	  exit 1; \
	}; \
	test `$(am__distuninstallcheck_listfiles) | wc -l` -eq 0 \
	   || { echo "ERROR: files left after uninstall:" ; \
	        if test -n "$(DESTDIR)"; then \
	          echo "  (check DESTDIR support)"; \
	        fi ; \
	        $(distuninstallcheck_listfiles) ; \
	        exit 1; } >&2
distcleancheck: distclean
	@if test '$(srcdir)' = . ; then \
	  echo "ERROR: distcleancheck can only run from a VPATH build" ; \
	  exit 1 ; \
	fi
	@test `$(distcleancheck_listfiles) | wc -l` -eq 0 \
	  || { echo "ERROR: files left in build directory after distclean:" ; \
	       $(distcleancheck_listfiles) ; \
	       exit 1; } >&2
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) check-local
check: check-am
all-am: Makefile all-local
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-local mostlyclean-am

distclean: distclean-am
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -f Makefile
distclean-am: clean-am distclean-generic

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am: install-data-local

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-exec-local

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -rf $(top_srcdir)/autom4te.cache
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-local

.MAKE: check-am install-am install-strip

.PHONY: all all-am all-local am--refresh check check-am check-local \
	clean clean-generic clean-local cscopelist-am ctags-am dist \
	dist-all dist-bzip2 dist-gzip dist-lzip dist-shar dist-tarZ \
	dist-xz dist-zip distcheck distclean distclean-generic \
	distcleancheck distdir distuninstallcheck dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-data-local install-dvi install-dvi-am \
	install-exec install-exec-am install-exec-local install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-generic pdf pdf-am ps ps-am tags-am uninstall \
	uninstall-am uninstall-local


export TOP_BUILD_DIR = $(abs_top_builddir)

export NETX_DIR = $(abs_top_builddir)/netx.build
export NETX_SRCDIR = $(abs_top_srcdir)/netx
export NETX_RESOURCE_DIR=$(NETX_SRCDIR)/net/sourceforge/jnlp/resources

export REPORT_STYLES_DIRNAME=report-styles

export TESTS_SRCDIR=$(abs_top_srcdir)/tests
export TESTS_DIR=$(abs_top_builddir)/tests.build

export NETX_UNIT_TEST_SRCDIR=$(TESTS_SRCDIR)/netx/unit
export NETX_TEST_DIR=$(TESTS_DIR)/netx
export NETX_UNIT_TEST_DIR=$(NETX_TEST_DIR)/unit

export JUNIT_RUNNER_DIR=$(TESTS_DIR)/junit-runner
export JUNIT_RUNNER_SRCDIR=$(TESTS_SRCDIR)/junit-runner

export JACOCO_OPERATOR_DIR=$(TESTS_DIR)/jacoco-operator
export JACOCO_OPERATOR_SRCDIR=$(TESTS_SRCDIR)/jacoco-operator

export TEST_EXTENSIONS_SRCDIR=$(TESTS_SRCDIR)/test-extensions
export TEST_EXTENSIONS_TESTS_SRCDIR=$(TESTS_SRCDIR)/test-extensions-tests
export REPRODUCERS_TESTS_SRCDIR=$(TESTS_SRCDIR)/reproducers
export TEST_EXTENSIONS_DIR=$(TESTS_DIR)/test-extensions
export CPP_UNITTEST_FRAMEWORK_SRCDIR=$(TESTS_SRCDIR)/UnitTest++
export CPP_UNITTEST_SRCDIR=$(TESTS_SRCDIR)/cpp-unit-tests
export CPP_UNITTEST_DIR=$(TESTS_DIR)/cpp-unit-tests
export TEST_EXTENSIONS_COMPATIBILITY_SYMLINK=$(TESTS_DIR)/netx/jnlp_testsengine
export TEST_EXTENSIONS_TESTS_DIR=$(TESTS_DIR)/test-extensions-tests
export REPRODUCERS_TESTS_SERVER_DEPLOYDIR=$(TESTS_DIR)/reproducers_test_server_deploydir
export REPRODUCERS_BUILD_DIR=$(TESTS_DIR)/reproducers.classes
export PRIVATE_KEYSTORE_NAME=teststore.ks
export PRIVATE_KEYSTORE_PASS=123456789
export EXPORTED_TEST_CERT_PREFIX=icedteatests
export EXPORTED_TEST_CERT_SUFFIX=crt
export TEST_CERT_ALIAS=icedteaweb
export PUBLIC_KEYSTORE_STUB=icedtea-web/security/trusted.certs
export PUBLIC_KEYSTORE_PASS=changeit
export SOFTKILLER=softkiller

export JUNIT_RUNNER_JAR=$(abs_top_builddir)/junit-runner.jar
export UNIT_CLASS_NAMES = $(abs_top_builddir)/unit_class_names
export REPRODUCERS_CLASS_NAMES = $(abs_top_builddir)/reproducers_class_names
export REPRODUCERS_CLASS_WHITELIST = $(abs_top_srcdir)/netx-dist-tests-whitelist
export EMMA_JAVA_ARGS=-Xmx2G
export EMMA_MODIFIED_FILES=tests-output.xml ServerAccess-logs.xml stdout.log stderr.log all.log
export EMMA_BACKUP_SUFFIX=_noEmma
export EMMA_SUFFIX=_withEmma
export META_MANIFEST = META-INF/MANIFEST.MF
export SIGNED_REPRODUCERS=signed signed2
export SIMPLE_REPRODUCERS=simple
export CUSTOM_REPRODUCERS=custom
export ALL_NONCUSTOM_REPRODUCERS=$(SIMPLE_REPRODUCERS) $(SIGNED_REPRODUCERS)
export ALL_REPRODUCERS=$(ALL_NONCUSTOM_REPRODUCERS) $(CUSTOM_REPRODUCERS)

export JACOCO_PATH:=$(shell dirname "$(JACOCO_JAR)")
export JACOCO_AGENT=org.jacoco.agent.jar
export JACOCO_ANT=org.jacoco.ant.jar
export JACOCO_REPORT=org.jacoco.report.jar
export JACOCO_AGENTRT=org.jacoco.agent.rt.jar
export JACOCO_CORE=org.jacoco.core.jar
export JACOCO_JAVAWS_RESULTS=$(TEST_EXTENSIONS_DIR)/jacoco_javaws.exec
export JACOCO_PLUGIN_RESULTS=$(TEST_EXTENSIONS_DIR)/jacoco_plugin.exec
export JACOCO_CLASSPATH=$(JACOCO_PATH)/$(JACOCO_CORE):$(JACOCO_PATH)/$(JACOCO_AGENT):$(JACOCO_PATH)/$(JACOCO_REPORT):$(JACOCO_PATH)/$(JACOCO_AGENTRT):$(JACOCO_PATH)/$(JACOCO_ANT):$(ASM_JAR)
export JACOCO_AGENT_SWITCH_BODY=-javaagent:$(JACOCO_PATH)/$(JACOCO_AGENTRT)
export JACOCO_BASE_EXCLUDE=org.junit.*:junit.*
export JACOCO_ADVANCED_EXCLUDE=:*jacoco*:java.lang.*:java.reflect.*:java.util.*:sun.reflect.*
export JACOCO_AGENT_SWITCH="$(JACOCO_AGENT_SWITCH_BODY)=excludes=$(JACOCO_BASE_EXCLUDE)"
export JACOCO_AGENT_JAVAWS_SWITCH=\"$(JACOCO_AGENT_SWITCH_BODY)=excludes=$(JACOCO_BASE_EXCLUDE)$(JACOCO_ADVANCED_EXCLUDE),xboot=true,destfile=$(JACOCO_JAVAWS_RESULTS)\"
export JACOCO_AGENT_PLUGIN_SWITCH=\"$(JACOCO_AGENT_SWITCH_BODY)=excludes=$(JACOCO_BASE_EXCLUDE)$(JACOCO_ADVANCED_EXCLUDE),xboot=true,destfile=$(JACOCO_PLUGIN_RESULTS)\"
export JACOCO_OPERATOR_EXEC=$(BOOT_DIR)/bin/java $(EMMA_JAVA_ARGS) -cp $(JACOCO_OPERATOR_DIR):$(JACOCO_CLASSPATH):. org.jacoco.operator.Main

# linking variables
export PLUGIN_LINK_NAME=libjavaplugin.so
export MOZILLA_LOCAL_PLUGINDIR=${HOME}/.mozilla/plugins
export MOZILLA_GLOBAL64_PLUGINDIR=/usr/lib64/mozilla/plugins
export MOZILLA_GLOBAL32_PLUGINDIR=/usr/lib/mozilla/plugins
export OPERA_GLOBAL64_PLUGINDIR=/usr/lib64/opera/plugins
export OPERA_GLOBAL32_PLUGINDIR=/usr/lib/opera/plugins
export BUILT_PLUGIN_LIBRARY=IcedTeaPlugin.so
export CPP_UNITTEST_FRAMEWORK_BUILDDIR=$(CPP_UNITTEST_DIR)/UnitTest++
export CPP_UNITTEST_FRAMEWORK_LIB_NAME=libUnitTest++.a
export CPP_UNITTEST_FRAMEWORK_LIB=$(CPP_UNITTEST_FRAMEWORK_BUILDDIR)/$(CPP_UNITTEST_FRAMEWORK_LIB_NAME)
export CPP_UNITTEST_EXECUTABLE=$(CPP_UNITTEST_DIR)/IcedTeaPluginUnitTests
export MOZILLA_LOCAL_BACKUP_FILE=${HOME}/$(PLUGIN_LINK_NAME).origU
export MOZILLA_GLOBAL_BACKUP_FILE=${HOME}/$(PLUGIN_LINK_NAME).origMG
export OPERA_GLOBAL_BACKUP_FILE=${HOME}/$(PLUGIN_LINK_NAME).origOG
export MOZILLA_FAMILY_TEST= "$(FIREFOX)" != "" -o "$(CHROMIUM)" != "" -o "$(CHROME)" != "" -o "$(MIDORI)" != "" -o "$(EPIPHANY)" != "" 
# end of linking variables

# Build directories

export BOOT_DIR = $(abs_top_builddir)/bootstrap/jdk1.6.0

export RUNTIME = $(BOOT_DIR)/jre/lib/rt.jar:$(BOOT_DIR)/jre/lib/jsse.jar$(RHINO_RUNTIME):$(BOOT_DIR)/jre/lib/resources.jar

# Flags
export IT_CFLAGS=$(CFLAGS) $(ARCHFLAG)
export IT_JAVAC_SETTINGS=-g -encoding utf-8 $(JAVACFLAGS) $(MEMORY_LIMIT) $(PREFER_SOURCE)
export IT_LANGUAGE_SOURCE_VERSION=6
export IT_CLASS_TARGET_VERSION=6
export IT_JAVACFLAGS=$(IT_JAVAC_SETTINGS) -source $(IT_LANGUAGE_SOURCE_VERSION) -target $(IT_CLASS_TARGET_VERSION)

#
# We need the jars in bootclasspath for a couple of reasons
#  - we use classes (in the sun.applet package) loaded by the bootclassloader
#    using another classloader to load classes from the same package causes an
#    IllegalAccessException
#  - we want full privileges
#
export LAUNCHER_BOOTCLASSPATH="-Xbootclasspath/a:$(datadir)/$(PACKAGE_NAME)/netx.jar$(RHINO_RUNTIME):$(TAGSOUP_JAR)"
export PLUGIN_BOOTCLASSPATH='"-Xbootclasspath/a:$(datadir)/$(PACKAGE_NAME)/netx.jar:$(datadir)/$(PACKAGE_NAME)/plugin.jar$(RHINO_RUNTIME):$(TAGSOUP_JAR)"'
export PLUGIN_COVERAGE_BOOTCLASSPATH='"-Xbootclasspath/a:$(datadir)/$(PACKAGE_NAME)/netx.jar:$(datadir)/$(PACKAGE_NAME)/plugin.jar$(RHINO_RUNTIME):$(JACOCO_CLASSPATH):$(TAGSOUP_JAR)"'

# Fake update version to work with the Deployment Toolkit script used by Oracle
# http://download.oracle.com/javase/tutorial/deployment/deploymentInDepth/depltoolkit_index.html
export JDK_UPDATE_VERSION=50

# Sources list

export PLUGIN_TEST_SRCS = $(abs_top_srcdir)/plugin/tests/LiveConnect/*.java

export NETX_PKGS = javax.jnlp net.sourceforge.nanoxml net.sourceforge.jnlp \
	net.sourceforge.jnlp.about \
	net.sourceforge.jnlp.cache net.sourceforge.jnlp.config \
	net.sourceforge.jnlp.controlpanel net.sourceforge.jnlp.event \
	net.sourceforge.jnlp.runtime net.sourceforge.jnlp.security \
	net.sourceforge.jnlp.security.viewer net.sourceforge.jnlp.services \
	net.sourceforge.jnlp.tools net.sourceforge.jnlp.util \
	sun.applet

@ENABLE_PLUGIN_TRUE@export ICEDTEAPLUGIN_CLEAN = clean-IcedTeaPlugin
@ENABLE_PLUGIN_TRUE@export LIVECONNECT_DIR = netscape sun/applet
@ENABLE_PLUGIN_TRUE@export PLUGIN_DIR=$(abs_top_builddir)/plugin/icedteanp
@ENABLE_PLUGIN_TRUE@export PLUGIN_SRCDIR=$(abs_top_srcdir)/plugin/icedteanp
@ENABLE_PLUGIN_TRUE@export LIVECONNECT_SRCS = $(PLUGIN_SRCDIR)/java
@ENABLE_PLUGIN_TRUE@export ICEDTEAPLUGIN_TARGET = $(PLUGIN_DIR)/$(BUILT_PLUGIN_LIBRARY) stamps/liveconnect-dist.stamp
@ENABLE_PLUGIN_TRUE@export PLUGIN_PKGS = sun.applet netscape.security netscape.javascript
#this is for plugin testcoverage
@ENABLE_PLUGIN_TRUE@export COVERABLE_PLUGIN_DIR=$(TESTS_DIR)/icedteanp-build-with-jacoco

export PLUGIN_VERSION = IcedTea-Web $(FULL_VERSION)

export EXTRA_DIST = $(top_srcdir)/netx $(top_srcdir)/plugin javaws.png javaws.desktop.in policyeditor.desktop.in  \
 itweb-settings.desktop.in launcher $(top_srcdir)/tests html-gen.sh netx-dist-tests-whitelist NEW_LINE_IFS

# reproducers `D`shortcuts
export DTEST_SERVER=-Dtest.server.dir=$(REPRODUCERS_TESTS_SERVER_DEPLOYDIR)
export DJAVAWS_BUILD=-Djavaws.build.bin=$(DESTDIR)$(bindir)/$(javaws)
export DBROWSERS=-Dused.browsers=$(FIREFOX):$(CHROMIUM):$(CHROME):$(OPERA):$(MIDORI):$(EPIPHANY)
export REPRODUCERS_DPARAMETERS= $(DTEST_SERVER) $(DJAVAWS_BUILD) $(DBROWSERS) $(BROWSER_TESTS_MODIFICATION)
# end of `D`shortcuts

#exported autoconf copies
export EXPORTED_JAVAC=$(BOOT_DIR)/bin/javac

# Top-Level Targets
# =================

all-local: stamps/netx-dist.stamp stamps/plugin.stamp launcher.build/$(javaws) \
 javaws.desktop stamps/docs.stamp launcher.build/$(itweb_settings) itweb-settings.desktop \
 launcher.build/$(policyeditor) policyeditor.desktop

check-local: $(RHINO_TESTS) $(JUNIT_TESTS)

clean-local: clean-netx clean-plugin clean-liveconnect \
 clean-native-ecj clean-launchers clean-desktop-files clean-docs clean-tests clean-bootstrap-directory
	if [ -e stamps ] ; then \
	  rmdir stamps ; \
	fi

.PHONY: clean-IcedTeaPlugin clean-add-netx clean-add-netx-debug clean-add-plugin clean-add-plugin-debug \
 clean-bootstrap-directory clean-native-ecj clean-desktop-files clean-netx-docs clean-docs clean-plugin-docs \
 clean-tests check-local clean-launchers stamps/check-pac-functions.stamp stamps/run-netx-unit-tests.stamp clean-netx-tests \
 clean-junit-runner clean-netx-unit-tests

install-exec-local:
	${mkinstalldirs} $(DESTDIR)$(bindir) $(DESTDIR)$(datadir)/$(PACKAGE_NAME)/ $(DESTDIR)$(libdir)
@ENABLE_PLUGIN_TRUE@	${INSTALL_PROGRAM} $(PLUGIN_DIR)/$(BUILT_PLUGIN_LIBRARY) $(DESTDIR)$(libdir)
@ENABLE_PLUGIN_TRUE@	${INSTALL_DATA} $(abs_top_builddir)/liveconnect/lib/classes.jar $(DESTDIR)$(datadir)/$(PACKAGE_NAME)/plugin.jar
	${INSTALL_DATA} $(NETX_DIR)/lib/classes.jar $(DESTDIR)$(datadir)/$(PACKAGE_NAME)/netx.jar
	${INSTALL_DATA} $(NETX_SRCDIR)/javaws_splash.png $(DESTDIR)$(datadir)/$(PACKAGE_NAME)/javaws_splash.png
	${INSTALL_PROGRAM} launcher.build/$(javaws) $(DESTDIR)$(bindir)
	${INSTALL_PROGRAM} launcher.build/$(itweb_settings) $(DESTDIR)$(bindir)
	${INSTALL_PROGRAM} launcher.build/$(policyeditor) $(DESTDIR)$(bindir)

install-data-local:
	${mkinstalldirs} -d $(DESTDIR)$(mandir)/man1
	${INSTALL_DATA} $(NETX_SRCDIR)/javaws.1 $(DESTDIR)$(mandir)/man1
	${INSTALL_DATA} $(NETX_SRCDIR)/itweb-settings.1 $(DESTDIR)$(mandir)/man1
	${INSTALL_DATA} $(NETX_SRCDIR)/policyeditor.1 $(DESTDIR)$(mandir)/man1
@ENABLE_DOCS_TRUE@	${mkinstalldirs} $(DESTDIR)$(htmldir)
@ENABLE_DOCS_TRUE@	(cd ${abs_top_builddir}/docs/netx; \
@ENABLE_DOCS_TRUE@	 for files in $$(find . -type f); \
@ENABLE_DOCS_TRUE@	 do \
@ENABLE_DOCS_TRUE@	   ${INSTALL_DATA} -D $${files} $(DESTDIR)$(htmldir)/netx/$${files}; \
@ENABLE_DOCS_TRUE@	 done)
@ENABLE_DOCS_TRUE@@ENABLE_PLUGIN_TRUE@	(cd ${abs_top_builddir}/docs/plugin; \
@ENABLE_DOCS_TRUE@@ENABLE_PLUGIN_TRUE@	 for files in $$(find . -type f); \
@ENABLE_DOCS_TRUE@@ENABLE_PLUGIN_TRUE@	 do \
@ENABLE_DOCS_TRUE@@ENABLE_PLUGIN_TRUE@	   ${INSTALL_DATA} -D $${files} $(DESTDIR)$(htmldir)/plugin/$${files}; \
@ENABLE_DOCS_TRUE@@ENABLE_PLUGIN_TRUE@	 done)

uninstall-local:
	rm -f $(DESTDIR)$(libdir)/$(BUILT_PLUGIN_LIBRARY)
	rm -f $(DESTDIR)$(datadir)/$(PACKAGE_NAME)/plugin.jar
	rm -f $(DESTDIR)$(datadir)/$(PACKAGE_NAME)/netx.jar
	rm -f $(DESTDIR)$(mandir)/man1/javaws.1
	rm -f $(DESTDIR)$(mandir)/man1/itweb-settings.1
	rm -f $(DESTDIR)$(mandir)/man1/policyeditor.1
	rm -f $(DESTDIR)$(bindir)/$(javaws)
	rm -f $(DESTDIR)$(bindir)/$(itweb_settings)
	rm -f $(DESTDIR)$(bindir)/$(policyeditor)
	rm -rf $(DESTDIR)$(htmldir)

@ENABLE_PLUGIN_TRUE@$(PLUGIN_DIR)/%.o: $(PLUGIN_SRCDIR)/%.cc
@ENABLE_PLUGIN_TRUE@	mkdir -p $(PLUGIN_DIR) && \
@ENABLE_PLUGIN_TRUE@	cd $(PLUGIN_DIR) && \
@ENABLE_PLUGIN_TRUE@	$(CXX) $(CXXFLAGS) \
@ENABLE_PLUGIN_TRUE@	   $(DEFS) $(VERSION_DEFS) \
@ENABLE_PLUGIN_TRUE@	  -DJDK_UPDATE_VERSION="\"$(JDK_UPDATE_VERSION)\"" \
@ENABLE_PLUGIN_TRUE@	  -DPLUGIN_NAME="\"IcedTea-Web Plugin\"" \
@ENABLE_PLUGIN_TRUE@	  -DPLUGIN_VERSION="\"$(PLUGIN_VERSION)\"" \
@ENABLE_PLUGIN_TRUE@	  -DPACKAGE_URL="\"$(PACKAGE_URL)\"" \
@ENABLE_PLUGIN_TRUE@	  -DMOZILLA_VERSION_COLLAPSED="$(MOZILLA_VERSION_COLLAPSED)" \
@ENABLE_PLUGIN_TRUE@	  -DICEDTEA_WEB_JRE="\"$(SYSTEM_JRE_DIR)\"" \
@ENABLE_PLUGIN_TRUE@	  -DPLUGIN_BOOTCLASSPATH=$(PLUGIN_BOOTCLASSPATH) \
@ENABLE_PLUGIN_TRUE@	  $(GLIB_CFLAGS) \
@ENABLE_PLUGIN_TRUE@	  $(MOZILLA_CFLAGS) \
@ENABLE_PLUGIN_TRUE@  	  -fvisibility=hidden \
@ENABLE_PLUGIN_TRUE@	  -fPIC -o $@ -c $<

@ENABLE_PLUGIN_TRUE@$(PLUGIN_DIR)/$(BUILT_PLUGIN_LIBRARY): $(addprefix $(PLUGIN_DIR)/,$(PLUGIN_OBJECTS))
@ENABLE_PLUGIN_TRUE@	cd $(PLUGIN_DIR) && \
@ENABLE_PLUGIN_TRUE@	$(CXX) $(CXXFLAGS) \
@ENABLE_PLUGIN_TRUE@	  $(PLUGIN_OBJECTS) \
@ENABLE_PLUGIN_TRUE@	  $(GLIB_LIBS) \
@ENABLE_PLUGIN_TRUE@	  $(MOZILLA_LIBS) \
@ENABLE_PLUGIN_TRUE@	  -shared -o $@

# Start of CPP Unit test targets

# Note that UnitTest++ has its own makefile, however this is avoided because it creates an in-source build.
@ENABLE_PLUGIN_TRUE@$(CPP_UNITTEST_FRAMEWORK_LIB): $(CPP_UNITTEST_FRAMEWORK_SRCDIR)
@ENABLE_PLUGIN_TRUE@	mkdir -p $(CPP_UNITTEST_FRAMEWORK_BUILDDIR) && \
@ENABLE_PLUGIN_TRUE@	pushd $(CPP_UNITTEST_FRAMEWORK_SRCDIR) && \
@ENABLE_PLUGIN_TRUE@	for cppfile in $$(find $(CPP_UNITTEST_FRAMEWORK_SRCDIR) -name '*.cpp') ; \
@ENABLE_PLUGIN_TRUE@	do \
@ENABLE_PLUGIN_TRUE@	  objfile="$(CPP_UNITTEST_FRAMEWORK_BUILDDIR)/$$(basename $${cppfile%.cpp}).o" ; \
@ENABLE_PLUGIN_TRUE@	  $(CXX) $(CXXFLAGS) -c $$cppfile -o $$objfile || exit 1 ; \
@ENABLE_PLUGIN_TRUE@	done ; \
@ENABLE_PLUGIN_TRUE@	ar cr $(CPP_UNITTEST_FRAMEWORK_LIB) $(CPP_UNITTEST_FRAMEWORK_BUILDDIR)/*.o ; \
@ENABLE_PLUGIN_TRUE@	popd

@ENABLE_PLUGIN_TRUE@clean-unittest++:
@ENABLE_PLUGIN_TRUE@	rm -f $(CPP_UNITTEST_FRAMEWORK_BUILDDIR)/*.o
@ENABLE_PLUGIN_TRUE@	rm -f $(CPP_UNITTEST_FRAMEWORK_LIB)
@ENABLE_PLUGIN_TRUE@	if [ -e $(CPP_UNITTEST_FRAMEWORK_BUILDDIR) ] ; then \
@ENABLE_PLUGIN_TRUE@		rmdir $(CPP_UNITTEST_FRAMEWORK_BUILDDIR) ; \
@ENABLE_PLUGIN_TRUE@	fi

@ENABLE_PLUGIN_TRUE@stamps/cpp-unit-tests-compile.stamp: $(CPP_UNITTEST_FRAMEWORK_LIB) $(CPP_UNITTEST_SRCDIR) $(addprefix $(PLUGIN_DIR)/,$(PLUGIN_OBJECTS))
@ENABLE_PLUGIN_TRUE@	mkdir -p $(CPP_UNITTEST_DIR) && \
@ENABLE_PLUGIN_TRUE@	pushd $(CPP_UNITTEST_SRCDIR) && \
@ENABLE_PLUGIN_TRUE@	for cppfile in $$(find $(CPP_UNITTEST_SRCDIR) -name '*.cc') ; \
@ENABLE_PLUGIN_TRUE@	do \
@ENABLE_PLUGIN_TRUE@	objfile="$(CPP_UNITTEST_DIR)/$$(basename $${cppfile%.cc}).o" ; \
@ENABLE_PLUGIN_TRUE@	echo "Compiling $$cppfile to $$objfile"; \
@ENABLE_PLUGIN_TRUE@	$(CXX) $(CXXFLAGS) \
@ENABLE_PLUGIN_TRUE@	   $(DEFS) $(VERSION_DEFS) \
@ENABLE_PLUGIN_TRUE@	  -DJDK_UPDATE_VERSION="\"$(JDK_UPDATE_VERSION)\"" \
@ENABLE_PLUGIN_TRUE@	  -DPLUGIN_NAME="\"IcedTea-Web Plugin\"" \
@ENABLE_PLUGIN_TRUE@	  -DPLUGIN_VERSION="\"$(PLUGIN_VERSION)\"" \
@ENABLE_PLUGIN_TRUE@	  -DPACKAGE_URL="\"$(PACKAGE_URL)\"" \
@ENABLE_PLUGIN_TRUE@	  -DMOZILLA_VERSION_COLLAPSED="$(MOZILLA_VERSION_COLLAPSED)" \
@ENABLE_PLUGIN_TRUE@	  -DICEDTEA_WEB_JRE="\"$(SYSTEM_JRE_DIR)\"" \
@ENABLE_PLUGIN_TRUE@	  -DPLUGIN_BOOTCLASSPATH=$(PLUGIN_BOOTCLASSPATH) \
@ENABLE_PLUGIN_TRUE@	  $(GLIB_CFLAGS) \
@ENABLE_PLUGIN_TRUE@	  $(MOZILLA_CFLAGS) \
@ENABLE_PLUGIN_TRUE@	  "-I$(CPP_UNITTEST_FRAMEWORK_SRCDIR)/src" \
@ENABLE_PLUGIN_TRUE@	  "-I$(PLUGIN_SRCDIR)" \
@ENABLE_PLUGIN_TRUE@	  -o $$objfile -c $$cppfile || exit 1 ; \
@ENABLE_PLUGIN_TRUE@	done ; \
@ENABLE_PLUGIN_TRUE@	popd ; \
@ENABLE_PLUGIN_TRUE@	mkdir -p stamps ; \
@ENABLE_PLUGIN_TRUE@	touch $@

@ENABLE_PLUGIN_TRUE@$(CPP_UNITTEST_EXECUTABLE): $(CPP_UNITTEST_FRAMEWORK_LIB) stamps/cpp-unit-tests-compile.stamp 
@ENABLE_PLUGIN_TRUE@	cd $(CPP_UNITTEST_DIR) && \
@ENABLE_PLUGIN_TRUE@	$(CXX) $(CXXFLAGS) \
@ENABLE_PLUGIN_TRUE@	  $(addprefix $(PLUGIN_DIR)/,$(PLUGIN_OBJECTS)) \
@ENABLE_PLUGIN_TRUE@	  $(CPP_UNITTEST_DIR)/*.o \
@ENABLE_PLUGIN_TRUE@	  -lrt \
@ENABLE_PLUGIN_TRUE@	  -lpthread \
@ENABLE_PLUGIN_TRUE@	  $(GLIB_LIBS) \
@ENABLE_PLUGIN_TRUE@	  $(MOZILLA_LIBS) \
@ENABLE_PLUGIN_TRUE@	  $(CPP_UNITTEST_FRAMEWORK_LIB)\
@ENABLE_PLUGIN_TRUE@	  $(BUILT_CPP_UNIT_TEST_FRAMEWORK) -o $@

@ENABLE_PLUGIN_TRUE@clean-cpp-unit-tests: 
@ENABLE_PLUGIN_TRUE@	rm -f stamps/cpp-unit-tests-compile.stamp
@ENABLE_PLUGIN_TRUE@	rm -f $(CPP_UNITTEST_EXECUTABLE)
@ENABLE_PLUGIN_TRUE@	rm -f $(CPP_UNITTEST_DIR)/*.o

@ENABLE_PLUGIN_TRUE@run-cpp-unit-tests: $(CPP_UNITTEST_EXECUTABLE)
@ENABLE_PLUGIN_TRUE@	$(CPP_UNITTEST_EXECUTABLE)

# End of CPP Unit test targets

@ENABLE_PLUGIN_TRUE@clean-IcedTeaPlugin:
@ENABLE_PLUGIN_TRUE@	rm -f $(PLUGIN_DIR)/*.o
@ENABLE_PLUGIN_TRUE@	rm -f $(PLUGIN_DIR)/$(BUILT_PLUGIN_LIBRARY)
@ENABLE_PLUGIN_TRUE@	if [ $(abs_top_srcdir) != $(abs_top_builddir) ]; then \
@ENABLE_PLUGIN_TRUE@	  if [ -e $(abs_top_builddir)/plugin/icedteanp ] ; then \
@ENABLE_PLUGIN_TRUE@	    rmdir $(abs_top_builddir)/plugin/icedteanp ; \
@ENABLE_PLUGIN_TRUE@	    rmdir $(abs_top_builddir)/plugin ; \
@ENABLE_PLUGIN_TRUE@	  fi ; \
@ENABLE_PLUGIN_TRUE@	fi

stamps/plugin.stamp: $(ICEDTEAPLUGIN_TARGET)
	mkdir -p stamps
	touch stamps/plugin.stamp

clean-plugin: $(ICEDTEAPLUGIN_CLEAN)
	rm -f stamps/plugin.stamp

liveconnect-source-files.txt:
	if test "x${LIVECONNECT_DIR}" != x; then \
	  find $(LIVECONNECT_SRCS) -name '*.java' | sort > $@ ; \
	fi
	touch $@

stamps/liveconnect.stamp: liveconnect-source-files.txt stamps/netx.stamp
	if test "x${LIVECONNECT_DIR}" != x; then \
	  mkdir -p $(abs_top_builddir)/liveconnect && \
	  $(BOOT_DIR)/bin/javac $(IT_JAVACFLAGS) \
	      -d $(abs_top_builddir)/liveconnect \
	      -bootclasspath $(NETX_DIR):$(RUNTIME) \
	      $(NETX_CLASSPATH_ARG) \
	      -sourcepath $(LIVECONNECT_SRCS) \
	      @liveconnect-source-files.txt ; \
	fi
	mkdir -p stamps
	touch $@

stamps/liveconnect-dist.stamp: stamps/liveconnect.stamp
	if test "x${LIVECONNECT_DIR}" != x; then \
	  (cd $(abs_top_builddir)/liveconnect ; \
	   mkdir -p lib ; \
	   $(BOOT_DIR)/bin/jar cf lib/classes.jar $(LIVECONNECT_DIR) ; \
	   cp -pPR $(SRC_DIR_LINK) $(LIVECONNECT_SRCS) src; \
	   find src -type f -exec chmod 640 '{}' ';' -o -type d -exec chmod 750 '{}' ';'; \
	   cd src ; \
	   $(ZIP) -qr $(abs_top_builddir)/liveconnect/lib/src.zip $(LIVECONNECT_DIR) ) ; \
	fi
	mkdir -p stamps
	touch $@

clean-liveconnect:
	rm -rf $(abs_top_builddir)/liveconnect
	rm -f stamps/liveconnect-dist.stamp
	rm -f liveconnect-source-files.txt
	rm -f stamps/liveconnect.stamp

# NetX
# requires availability of OpenJDK source code including
# a patch applied to sun.plugin.AppletViewerPanel and generated sources

netx-source-files.txt:
	find $(NETX_SRCDIR) -name '*.java' | sort > $@ ; \
	for src in $(NETX_EXCLUDE_SRCS) ; \
	do \
	  sed -i "/$${src}/ d" $@ ; \
	done
@WITH_RHINO_FALSE@	sed -i '/RhinoBasedPacEvaluator/ d' $@
@HAVE_JAVA7_FALSE@	sed -i '/VariableX509TrustManagerJDK7/ d' $@

stamps/netx-html-gen.stamp:
	(cd $$NETX_SRCDIR/..; \
	mkdir -p html-gen; \
	cp AUTHORS NEWS COPYING ChangeLog html-gen/; \
	export HTML_GEN_DEBUG=true; \
	bash html-gen.sh 36; \
	unset HTML_GEN_DEBUG)
	${INSTALL_DATA} $(NETX_SRCDIR)/../html-gen/*.html $(NETX_RESOURCE_DIR)
	rm -r $(NETX_SRCDIR)/../html-gen/
	mkdir -p stamps
	touch $@

stamps/netx.stamp: netx-source-files.txt stamps/bootstrap-directory.stamp stamps/netx-html-gen.stamp
	mkdir -p $(NETX_DIR)
	$(BOOT_DIR)/bin/javac $(IT_JAVACFLAGS) \
	    -d $(NETX_DIR) \
	    -sourcepath $(NETX_SRCDIR) \
	    -bootclasspath $(RUNTIME) \
	    $(NETX_CLASSPATH_ARG) \
	    @netx-source-files.txt
	(cd $(NETX_RESOURCE_DIR); \
	 for files in $$(find . -type f); \
	 do \
	   ${INSTALL_DATA} -D $${files} \
	   $(NETX_DIR)/net/sourceforge/jnlp/resources/$${files}; \
	 done)
	cp -a $(NETX_SRCDIR)/net/sourceforge/jnlp/runtime/pac-funcs.js \
	  $(NETX_DIR)/net/sourceforge/jnlp/runtime
	cp -a build.properties $(NETX_DIR)/net/sourceforge/jnlp/
	mkdir -p stamps
	touch $@

stamps/netx-dist.stamp: stamps/netx.stamp $(abs_top_builddir)/netx.manifest
	(cd $(NETX_DIR) ; \
	 mkdir -p lib ; \
	 $(BOOT_DIR)/bin/jar cfm lib/classes.jar \
	  $(abs_top_builddir)/netx.manifest javax/jnlp net sun; \
	 cp -pPR $(SRC_DIR_LINK) $(NETX_SRCDIR) src; \
	 find src -type f -exec chmod 640 '{}' ';' -o -type d -exec chmod 750 '{}' ';'; \
	 cd src ; \
	 $(ZIP) -qr $(NETX_DIR)/lib/src.zip javax net sun)
	mkdir -p stamps
	touch $@

clean-netx:
	rm -rf $(NETX_DIR)
	rm -f stamps/netx-dist.stamp
	rm -f netx-source-files.txt
	rm -f stamps/netx.stamp
	rm -f stamps/netx-html-gen.stamp
	rm -f $(NETX_RESOURCE_DIR)/{NEWS,AUTHORS,COPYING,ChangeLog}.html

clean-desktop-files:
	rm -f javaws.desktop
	rm -f itweb-settings.desktop

launcher.build/$(javaws): launcher/launchers.in
	mkdir -p launcher.build
	MAIN_CLASS=net.sourceforge.jnlp.runtime.Boot ;\
	BIN_LOCATION=$(bindir)/$(javaws) ;\
	PROGRAM_NAME=$(javaws) ;\
	$(edit_launcher_script) < $< > $@

launcher.build/$(itweb_settings): launcher/launchers.in
	mkdir -p launcher.build
	MAIN_CLASS=net.sourceforge.jnlp.controlpanel.CommandLine ;\
	BIN_LOCATION=$(bindir)/$(itweb_settings) ;\
	PROGRAM_NAME=$(itweb_settings) ;\
	$(edit_launcher_script) < $< > $@

launcher.build/$(policyeditor): launcher/launchers.in
	mkdir -p launcher.build
	MAIN_CLASS=net.sourceforge.jnlp.security.policyeditor.PolicyEditor ;\
	BIN_LOCATION=$(bindir)/$(policyeditor) ;\
	PROGRAM_NAME=$(policyeditor) ;\
	$(edit_launcher_script) < $< > $@

clean-launchers:
	rm -f launcher.build/$(javaws)
	rm -f launcher.build/$(itweb_settings)
	rm -f launcher.build/$(policyeditor)
	if [ -e launcher.build ] ; then \
	  rmdir launcher.build ; \
	fi

javaws.desktop: javaws.desktop.in
	sed "s#PATH_TO_JAVAWS#$(bindir)/$(javaws)#" < $(srcdir)/javaws.desktop.in > javaws.desktop

itweb-settings.desktop: $(srcdir)/itweb-settings.desktop.in
	sed "s#PATH_TO_ITWEB_SETTINGS#$(bindir)/$(itweb_settings)#" \
	  < $(srcdir)/itweb-settings.desktop.in > itweb-settings.desktop

policyeditor.desktop: $(srcdir)/policyeditor.desktop.in
	sed 's#PATH_TO_POLICYEDITOR#$(bindir)/$(policyeditor)#' \
	< $(srcdir)/policyeditor.desktop.in > policyeditor.desktop

# documentation

stamps/docs.stamp: stamps/netx-docs.stamp stamps/plugin-docs.stamp
	touch stamps/docs.stamp

clean-docs: clean-netx-docs clean-plugin-docs
	if [ -e ${abs_top_builddir}/docs ] ; then \
	  rmdir ${abs_top_builddir}/docs ; \
	fi
	rm -f stamps/docs.stamp

stamps/netx-docs.stamp: stamps/bootstrap-directory.stamp
@ENABLE_DOCS_TRUE@	$(BOOT_DIR)/bin/javadoc $(JAVADOC_MEM_OPTS) $(JAVADOC_OPTS) \
@ENABLE_DOCS_TRUE@	 -d ${abs_top_builddir}/docs/netx -sourcepath $(NETX_SRCDIR) \
@ENABLE_DOCS_TRUE@	 -doctitle 'IcedTea-Web: NetX API Specification' \
@ENABLE_DOCS_TRUE@	 -windowtitle 'IcedTea-Web: NetX ' \
@ENABLE_DOCS_TRUE@	 -header '<strong>IcedTea-Web<br/>NetX</strong>' \
@ENABLE_DOCS_TRUE@	 $(NETX_PKGS)
	mkdir -p stamps
	touch stamps/netx-docs.stamp

clean-netx-docs:
	rm -rf ${abs_top_builddir}/docs/netx
	rm -f stamps/netx-docs.stamp

stamps/plugin-docs.stamp: stamps/bootstrap-directory.stamp
@ENABLE_DOCS_TRUE@@ENABLE_PLUGIN_TRUE@	$(BOOT_DIR)/bin/javadoc $(JAVADOC_MEM_OPTS) $(JAVADOC_OPTS) \
@ENABLE_DOCS_TRUE@@ENABLE_PLUGIN_TRUE@	 -d ${abs_top_builddir}/docs/plugin -sourcepath $(NETX_SRCDIR):$(LIVECONNECT_SRCS) \
@ENABLE_DOCS_TRUE@@ENABLE_PLUGIN_TRUE@	 -doctitle 'IcedTea-Web: Plugin API Specification' \
@ENABLE_DOCS_TRUE@@ENABLE_PLUGIN_TRUE@	 -windowtitle 'IcedTea-Web: Plugin ' \
@ENABLE_DOCS_TRUE@@ENABLE_PLUGIN_TRUE@	 -header '<strong>IcedTea-Web<br/>Plugin</strong>' \
@ENABLE_DOCS_TRUE@@ENABLE_PLUGIN_TRUE@	 $(PLUGIN_PKGS)
	mkdir -p stamps
	touch stamps/plugin-docs.stamp

clean-plugin-docs:
	rm -rf ${abs_top_builddir}/docs/plugin
	rm -f stamps/plugin-docs.stamp

# check
# ==========================

clean-tests: clean-netx-tests clean-cpp-unit-tests clean-unittest++
	if [ -e $(CPP_UNITTEST_DIR) ] ; then \
		rmdir $(CPP_UNITTEST_DIR) ; \
	fi
	if [ -e $(TESTS_DIR) ]; then \
		rmdir $(TESTS_DIR) ; \
	fi

stamps/check-pac-functions.stamp: stamps/bootstrap-directory.stamp
	./jrunscript $(abs_top_srcdir)/tests/netx/pac/pac-funcs-test.js \
	  $$(readlink -f $(abs_top_srcdir)/netx/net/sourceforge/jnlp/runtime/pac-funcs.js) ; \
	mkdir -p stamps && \
	touch $@

junit-runner-source-files.txt:
	find $(JUNIT_RUNNER_SRCDIR) -name '*.java' | sort > $@

jacoco-operator-source-files.txt:
	find $(JACOCO_OPERATOR_SRCDIR) -name '*.java' | sort > $@

$(JUNIT_RUNNER_JAR): junit-runner-source-files.txt stamps/test-extensions-compile.stamp
	mkdir -p $(JUNIT_RUNNER_DIR) && \
	$(BOOT_DIR)/bin/javac $(IT_JAVACFLAGS) \
	  -d $(JUNIT_RUNNER_DIR) \
	  -classpath $(JUNIT_JAR):$(TEST_EXTENSIONS_DIR) \
	  @junit-runner-source-files.txt && \
	$(BOOT_DIR)/bin/jar cf $@  -C $(JUNIT_RUNNER_DIR) .

stamps/junit-jnlp-dist-dirs: junit-jnlp-dist-simple.txt stamps/junit-jnlp-dist-signed.stamp junit-jnlp-dist-custom.txt
	mkdir -p $(REPRODUCERS_TESTS_SERVER_DEPLOYDIR)
	mkdir -p $(REPRODUCERS_BUILD_DIR)
	touch $@

junit-jnlp-dist-custom.txt:
	cd $(REPRODUCERS_TESTS_SRCDIR)/$(CUSTOM_REPRODUCERS)/ ; \
	find .  -maxdepth 1 -mindepth 1 | sed "s/.\/*//" > $(abs_top_builddir)/$@

junit-jnlp-dist-simple.txt:
	cd $(REPRODUCERS_TESTS_SRCDIR)/simple/ ; \
	find .  -maxdepth 1 -mindepth 1 | sed "s/.\/*//" > $(abs_top_builddir)/$@

stamps/junit-jnlp-dist-signed.stamp: 
	types=($(SIGNED_REPRODUCERS)) ; \
	for which in "$${types[@]}" ; do \
	  pushd $(REPRODUCERS_TESTS_SRCDIR)/$$which/ ; \
	  find .  -maxdepth 1 -mindepth 1 | sed "s/.\/*//" > $(abs_top_builddir)/junit-jnlp-dist-$$which.txt ; \
	  popd ; \
	done ; \
	mkdir -p stamps && \
	touch $@

stamps/netx-dist-tests-prepare-reproducers.stamp: stamps/junit-jnlp-dist-dirs stamps/liveconnect-dist.stamp stamps/netx-dist.stamp stamps/plugin.stamp
	types=($(ALL_NONCUSTOM_REPRODUCERS)); \
	for which in "$${types[@]}" ; do \
	  . $(abs_top_srcdir)/NEW_LINE_IFS ; \
	  simpleReproducers=(`cat $(abs_top_builddir)/junit-jnlp-dist-$$which.txt `); \
	  IFS="$$IFS_BACKUP" ; \
	  for dir in "$${simpleReproducers[@]}" ; do \
	    echo "processing: $$dir" ; \
	    mkdir -p "$(REPRODUCERS_BUILD_DIR)/$$dir" ; \
	    if [ -e "$(REPRODUCERS_TESTS_SRCDIR)/$$which/$$dir/srcs/" ]; then \
	      d=`pwd` ; \
	      cd "$(REPRODUCERS_TESTS_SRCDIR)/$$which/$$dir/srcs/" ; \
	      srcFiles=`find . -mindepth 1 -type f -name "*.java" | sed "s/.\/*//"` ; \
	      notSrcFiles=`find . -mindepth 1 -type f \! -name "*.java" | sed "s/.\/*//"` ; \
	      $(BOOT_DIR)/bin/javac -cp $(NETX_DIR)/lib/classes.jar:$(abs_top_builddir)/liveconnect -d "$(REPRODUCERS_BUILD_DIR)/$$dir/" $$srcFiles ; \
	      if [ -n "$$notSrcFiles" ] ; then \
	        cp -R --parents $$notSrcFiles "$(REPRODUCERS_BUILD_DIR)/$$dir/" ; \
	      fi ; \
	      cd "$(REPRODUCERS_BUILD_DIR)/$$dir/" ; \
	      if [ -f $(META_MANIFEST) ]; \
	      then \
	        $(BOOT_DIR)/bin/jar cfm "$(REPRODUCERS_TESTS_SERVER_DEPLOYDIR)/$$dir.jar" $(META_MANIFEST) * ; \
	      else \
	        $(BOOT_DIR)/bin/jar cf "$(REPRODUCERS_TESTS_SERVER_DEPLOYDIR)/$$dir.jar" * ; \
	      fi; \
	      cd "$$d" ; \
	    fi; \
	  done ; \
	done ; \
	mkdir -p stamps && \
	touch $@

stamps/netx-dist-tests-sign-some-reproducers.stamp: stamps/netx-dist-tests-prepare-reproducers.stamp
	keystore=$(abs_top_builddir)/$(PRIVATE_KEYSTORE_NAME); \
	types=($(SIGNED_REPRODUCERS)) ; \
	for which in "$${types[@]}" ; do \
	  tcaw=$(TEST_CERT_ALIAS)_$$which ; \
	  $(BOOT_DIR)/bin/keytool -genkey -alias $$tcaw -keystore $$keystore -keypass $(PRIVATE_KEYSTORE_PASS) -storepass $(PRIVATE_KEYSTORE_PASS) -dname "cn=$$tcaw, ou=$$tcaw, o=$$tcaw, c=$$tcaw" ; \
	    . $(abs_top_srcdir)/NEW_LINE_IFS ; \
	  signedReproducers=(`cat $(abs_top_builddir)/junit-jnlp-dist-$$which.txt `); \
	    IFS="$$IFS_BACKUP" ; \
	  for dir in "$${signedReproducers[@]}" ; do \
	   $(BOOT_DIR)/bin/jarsigner -keystore $$keystore -storepass $(PRIVATE_KEYSTORE_PASS) -keypass $(PRIVATE_KEYSTORE_PASS)  "$(REPRODUCERS_TESTS_SERVER_DEPLOYDIR)/$$dir.jar"  $$tcaw ; \
	  done ; \
	done ; \
	mkdir -p stamps && \
	touch $@

stamps/change-dots-to-paths.stamp: stamps/netx-dist-tests-sign-some-reproducers.stamp
	pushd  $(REPRODUCERS_TESTS_SERVER_DEPLOYDIR); \
	types=($(ALL_NONCUSTOM_REPRODUCERS)); \
	for which in "$${types[@]}" ; do \
	  . $(abs_top_srcdir)/NEW_LINE_IFS ; \
	  simpleReproducers=(`cat $(abs_top_builddir)/junit-jnlp-dist-$$which.txt `); \
	  IFS="$$IFS_BACKUP" ; \
	  for dir in "$${simpleReproducers[@]}" ; do \
	    if test "$${dir:0:1}" = "." ; then \
	      echo "reproducer $$dir starts with dot. It is forbidden" ; \
	      exit 5; \
	    fi; \
	    if test "$${dir:(-1)}" = "." ; then \
	      echo "reproducer $$dir ends with dot. It is forbidden" ; \
	      exit 5; \
	    fi; \
	    q=`expr index "$$dir" .`; \
	    r=$$? ; \
	    if [ $$r = 0  ]; then \
	      slashed_dir="./$${dir//.//}" ; \
	      path="`dirname $$slashed_dir`" ; \
	      file="`basename $$slashed_dir`.jar" ; \
	      echo "copying $$dir.jar to $$path as $$file" ; \
	      mkdir --parents $$path ; \
	      cp $$dir".jar" "$$path"/"$$file" ; \
	    fi ; \
	  done ; \
	done ; \
	popd ; \
	mkdir -p stamps && \
	touch $@

#this always tries to remove  previous testcert
#the code is copypasted from netx-dist-tests-remove-cert-from-public, because 
#with depending to not stamped target we always have to rerun reproducers targets
stamps/exported-test-certs.stamp: stamps/change-dots-to-paths.stamp
	-types=($(SIGNED_REPRODUCERS)) ; \
	PUBLIC_KEYSTORE=$$XDG_CONFIG_HOME ; \
	if test "x$$PUBLIC_KEYSTORE" = x; then \
	  PUBLIC_KEYSTORE=${HOME}/.config ; \
	fi ;\
	PUBLIC_KEYSTORE=$$PUBLIC_KEYSTORE/$(PUBLIC_KEYSTORE_STUB); \
	keystoredir=`dirname $(PUBLIC_KEYSTORE)`; \
	[ ! -d $(keystoredir) ] && mkdir -p $(keystoredir); \
	for which in "$${types[@]}" ; do \
	  $(BOOT_DIR)/bin/keytool -delete -alias $(TEST_CERT_ALIAS)_$$which -keystore $$PUBLIC_KEYSTORE -storepass $(PUBLIC_KEYSTORE_PASS) ; \
	done ;
	types=($(SIGNED_REPRODUCERS)) ; \
	for which in "$${types[@]}" ; do \
	  $(BOOT_DIR)/bin/keytool -export -alias $(TEST_CERT_ALIAS)_$$which -file $(EXPORTED_TEST_CERT_PREFIX)_$$which.$(EXPORTED_TEST_CERT_SUFFIX) -storepass $(PRIVATE_KEYSTORE_PASS) -keystore $(PRIVATE_KEYSTORE_NAME) ; \
	done ;
	mkdir -p stamps && \
	touch $@

stamps/netx-dist-tests-import-cert-to-public: stamps/exported-test-certs.stamp
	types=($(SIGNED_REPRODUCERS)) ; \
	PUBLIC_KEYSTORE=$$XDG_CONFIG_HOME ; \
	if test "x$$PUBLIC_KEYSTORE" = x; then \
	  PUBLIC_KEYSTORE=${HOME}/.config ; \
	fi ;\
	PUBLIC_KEYSTORE=$$PUBLIC_KEYSTORE/$(PUBLIC_KEYSTORE_STUB); \
	keystoredir=`dirname $(PUBLIC_KEYSTORE)`; \
	[ ! -d $(keystoredir) ] && mkdir -p $(keystoredir); \
	for which in "$${types[@]}" ; do \
	  yes | $(BOOT_DIR)/bin/keytool -import -alias $(TEST_CERT_ALIAS)_$$which -keystore $$PUBLIC_KEYSTORE -storepass $(PUBLIC_KEYSTORE_PASS) -file $(EXPORTED_TEST_CERT_PREFIX)_$$which.$(EXPORTED_TEST_CERT_SUFFIX) ;\
	done ;
	mkdir -p stamps && \
	touch $@

netx-dist-tests-remove-cert-from-public:
	-types=($(SIGNED_REPRODUCERS)) ; \
	PUBLIC_KEYSTORE=$$XDG_CONFIG_HOME ; \
	if test "x$$PUBLIC_KEYSTORE" = x; then \
	  PUBLIC_KEYSTORE=${HOME}/.config ; \
	fi ;\
	PUBLIC_KEYSTORE=$$PUBLIC_KEYSTORE/$(PUBLIC_KEYSTORE_STUB); \
	keystoredir=`dirname $(PUBLIC_KEYSTORE)`; \
	[ ! -d $(keystoredir) ] && mkdir -p $(keystoredir); \
	for which in "$${types[@]}" ; do \
	  $(BOOT_DIR)/bin/keytool -delete -alias $(TEST_CERT_ALIAS)_$$which -keystore $$PUBLIC_KEYSTORE -storepass $(PUBLIC_KEYSTORE_PASS) ; \
	done ;
	-rm -rf stamps/netx-dist-tests-import-cert-to-public

test-extensions-source-files.txt:
	find $(TEST_EXTENSIONS_SRCDIR) -name '*.java' | sort > $@

stamps/test-extensions-compile.stamp: stamps/netx-dist.stamp stamps/plugin.stamp stamps/junit-jnlp-dist-dirs test-extensions-source-files.txt
	mkdir -p $(TEST_EXTENSIONS_DIR);
	mkdir -p $(NETX_TEST_DIR);
	ln -s $(TEST_EXTENSIONS_DIR) $(TEST_EXTENSIONS_COMPATIBILITY_SYMLINK);
	$(BOOT_DIR)/bin/javac $(IT_JAVACFLAGS) \
	 -d $(TEST_EXTENSIONS_DIR) \
	 -classpath $(JUNIT_JAR):$(NETX_DIR)/lib/classes.jar:$(abs_top_builddir)/liveconnect/lib/classes.jar \
	 @test-extensions-source-files.txt && \
	mkdir -p stamps && \
	touch $@

test-extensions-tests-source-files.txt:
	find $(TEST_EXTENSIONS_TESTS_SRCDIR) -name '*.java' | sort > $@

stamps/test-extensions-tests-compile.stamp: stamps/junit-jnlp-dist-dirs test-extensions-tests-source-files.txt  stamps/test-extensions-compile.stamp
	mkdir -p $(TEST_EXTENSIONS_TESTS_DIR);
	$(BOOT_DIR)/bin/javac $(IT_JAVACFLAGS) \
	 -d $(TEST_EXTENSIONS_TESTS_DIR) \
	 -classpath $(JUNIT_JAR):$(NETX_DIR)/lib/classes.jar:$(TEST_EXTENSIONS_DIR) \
	 @test-extensions-tests-source-files.txt && \
	mkdir -p stamps && \
	touch $@

stamps/compile-reproducers-testcases.stamp: stamps/netx-dist.stamp stamps/plugin.stamp stamps/junit-jnlp-dist-dirs \
 test-extensions-source-files.txt stamps/test-extensions-compile.stamp stamps/test-extensions-tests-compile.stamp
	types=($(ALL_REPRODUCERS)); \
	for which in "$${types[@]}" ; do \
	  . $(abs_top_srcdir)/NEW_LINE_IFS ; \
	  simpleReproducers=(`cat $(abs_top_builddir)/junit-jnlp-dist-$$which.txt `); \
	  IFS="$$IFS_BACKUP" ; \
	  for dir in "$${simpleReproducers[@]}" ; do \
	    $(BOOT_DIR)/bin/javac $(IT_JAVACFLAGS) \
	      -d $(TEST_EXTENSIONS_TESTS_DIR) \
	      -classpath $(JUNIT_JAR):$(NETX_DIR)/lib/classes.jar:$(TEST_EXTENSIONS_DIR) \
	    "$(REPRODUCERS_TESTS_SRCDIR)/$$which/$$dir/testcases/"*.java ; \
	    if [ -d "$(REPRODUCERS_TESTS_SRCDIR)/$$which/$$dir/testcases" ]; then \
	        pushd "$(REPRODUCERS_TESTS_SRCDIR)/$$which/$$dir/testcases" ; \
	        NONJAVA_RESOURCES=`ls | grep -v ".*\\.java$$"` ; \
	        if [ -n "$$NONJAVA_RESOURCES" ]; then \
	            cp $$NONJAVA_RESOURCES $(TEST_EXTENSIONS_TESTS_DIR)/ ; \
	        fi ; \
	        popd ; \
	    fi ; \
	  done ; \
	done ; \
	mkdir -p stamps && \
	touch $@

stamps/copy-reproducers-resources.stamp: stamps/junit-jnlp-dist-dirs
	types=($(ALL_REPRODUCERS)); \
	for which in "$${types[@]}" ; do \
	  . $(abs_top_srcdir)/NEW_LINE_IFS ; \
	  simpleReproducers=(`cat $(abs_top_builddir)/junit-jnlp-dist-$$which.txt `); \
	  IFS="$$IFS_BACKUP" ; \
	  for dir in "$${simpleReproducers[@]}" ; do \
	    cp -R "$(REPRODUCERS_TESTS_SRCDIR)/$$which/$$dir/resources/"*  $(REPRODUCERS_TESTS_SERVER_DEPLOYDIR)/ ; \
	  done ; \
	done ; \
	mkdir -p stamps && \
	touch $@

$(REPRODUCERS_CLASS_NAMES): $(REPRODUCERS_CLASS_WHITELIST)
	whiteListed=`cat $(REPRODUCERS_CLASS_WHITELIST)`; \
	cd $(TEST_EXTENSIONS_TESTS_DIR) ; \
	class_names= ; \
	for test in `find -type f` ; do \
	  class_name=`echo $$test | sed -e 's|\.class$$||' -e 's|^\./||'` ; \
	  class_name=`echo $$class_name | sed -e 's|/|.|g' ` ; \
	  INLCUDE="NO" ; \
	  for x in $$whiteListed ; do \
	    q=`expr match "$$class_name" "$$x"`; \
	    r=$$? ; \
	    if [ $$r = 0  ]; then \
	      echo "$$class_name will be included in reproducers testcases because of $$x pattern in $(REPRODUCERS_CLASS_WHITELIST). Matching was  $$q"; \
	      INLCUDE="YES" ; \
	    fi; \
	  done; \
	  if [ "$$INLCUDE" = "YES"  ]; then \
	    class_names="$$class_names $$class_name" ; \
	  else \
	    echo "$$class_name had no match in $(REPRODUCERS_CLASS_WHITELIST). Excluding"; \
	  fi; \
	done ; \
	echo $$class_names > $(REPRODUCERS_CLASS_NAMES)

$(TESTS_DIR)/$(SOFTKILLER):
	cd  $(TESTS_SRCDIR)/$(SOFTKILLER); \
	$(MAKE) ; \
	mv $(SOFTKILLER) $(TESTS_DIR)/

stamps/run-netx-dist-tests.stamp: stamps/netx-dist.stamp stamps/plugin.stamp launcher.build/$(javaws) \
 javaws.desktop stamps/docs.stamp launcher.build/$(itweb_settings) itweb-settings.desktop launcher.build/$(policyeditor) policyeditor.desktop \
 stamps/netx.stamp stamps/junit-jnlp-dist-dirs stamps/netx-dist-tests-import-cert-to-public $(TESTS_DIR)/softkiller \
 stamps/test-extensions-compile.stamp stamps/compile-reproducers-testcases.stamp $(JUNIT_RUNNER_JAR) stamps/copy-reproducers-resources.stamp\
 $(TESTS_DIR)/$(REPORT_STYLES_DIRNAME) $(REPRODUCERS_CLASS_NAMES) stamps/process-custom-reproducers.stamp
	cd $(TEST_EXTENSIONS_DIR) ; \
	class_names=`cat $(REPRODUCERS_CLASS_NAMES)` ; \
	CLASSPATH=$(NETX_DIR)/lib/classes.jar:$(JUNIT_JAR):$(JUNIT_RUNNER_JAR):.:$(TEST_EXTENSIONS_TESTS_DIR):$(TEST_EXTENSIONS_SRCDIR) ; \
	  $(BOOT_DIR)/bin/java $(REPRODUCERS_DPARAMETERS) \
	 -Xbootclasspath/a:$(RUNTIME):$$CLASSPATH CommandLine $$class_names
@WITH_XSLTPROC_TRUE@	-$(XSLTPROC)  --stringparam logs logs_reproducers.html $(TESTS_SRCDIR)/$(REPORT_STYLES_DIRNAME)/jreport.xsl $(TEST_EXTENSIONS_DIR)/tests-output.xml > $(TESTS_DIR)/index_reproducers.html
@WITH_XSLTPROC_TRUE@	-$(XSLTPROC)  $(TESTS_SRCDIR)/$(REPORT_STYLES_DIRNAME)/logs.xsl $(TEST_EXTENSIONS_DIR)/ServerAccess-logs.xml > $(TESTS_DIR)/logs_reproducers.html
@WITH_XSLTPROC_TRUE@	-$(XSLTPROC)  $(TESTS_SRCDIR)/$(REPORT_STYLES_DIRNAME)/textreport.xsl $(TEST_EXTENSIONS_DIR)/tests-output.xml > $(TESTS_DIR)/summary_reproducers.txt
	touch $@

stamps/process-custom-reproducers.stamp: stamps/junit-jnlp-dist-dirs stamps/netx-dist-tests-import-cert-to-public \
 stamps/test-extensions-compile.stamp stamps/compile-reproducers-testcases.stamp $(JUNIT_RUNNER_JAR) stamps/copy-reproducers-resources.stamp\
 $(TESTS_DIR)/$(REPORT_STYLES_DIRNAME) $(REPRODUCERS_CLASS_NAMES)
	. $(abs_top_srcdir)/NEW_LINE_IFS ; \
	customReproducers=(`cat $(abs_top_builddir)/junit-jnlp-dist-custom.txt `); \
	IFS="$$IFS_BACKUP" ; \
	for dir in "$${customReproducers[@]}" ; do \
	  pushd $(REPRODUCERS_TESTS_SRCDIR)/$(CUSTOM_REPRODUCERS)/$$dir/srcs; \
	  $(MAKE) prepare-reproducer ; \
	  popd ; \
	done ; \
	mkdir -p stamps && \
	touch $@

clean-custom-reproducers: junit-jnlp-dist-custom.txt
	. $(abs_top_srcdir)/NEW_LINE_IFS ; \
	customReproducers=(`cat $(abs_top_builddir)/junit-jnlp-dist-custom.txt `); \
	IFS="$$IFS_BACKUP" ; \
	for dir in "$${customReproducers[@]}" ; do \
	  pushd $(REPRODUCERS_TESTS_SRCDIR)/custom/$$dir/srcs; \
	  $(MAKE) clean-reproducer ; \
	  popd ; \
	done ; \
	rm -f stamps/process-custom-reproducers.stamp

#for global-links you must be root, for opera there do not exists user-links
#although this targets will indeed create symbolic links to enable 
#icedtea-web plugin inside browser it is intended for testing purposes
@ENABLE_PLUGIN_TRUE@stamps/user-links.stamp: stamps/netx-dist.stamp stamps/plugin.stamp \
@ENABLE_PLUGIN_TRUE@ launcher.build/$(javaws) stamps/netx.stamp $(DESTDIR)$(libdir)/$(BUILT_PLUGIN_LIBRARY) 
@ENABLE_PLUGIN_TRUE@	if [ $(MOZILLA_FAMILY_TEST) ]  ; then  \
@ENABLE_PLUGIN_TRUE@	  if [ -e $(MOZILLA_LOCAL_PLUGINDIR)/$(PLUGIN_LINK_NAME) ] ; then \
@ENABLE_PLUGIN_TRUE@	    mv -f $(MOZILLA_LOCAL_PLUGINDIR)/$(PLUGIN_LINK_NAME)  $(MOZILLA_LOCAL_BACKUP_FILE) ; \
@ENABLE_PLUGIN_TRUE@	    echo "$(MOZILLA_LOCAL_PLUGINDIR)/$(PLUGIN_LINK_NAME) backed up as $(MOZILLA_LOCAL_BACKUP_FILE)" ; \
@ENABLE_PLUGIN_TRUE@	  else \
@ENABLE_PLUGIN_TRUE@	    echo "$(MOZILLA_LOCAL_PLUGINDIR)/$(PLUGIN_LINK_NAME) doesn't exists, nothing to be backed up to $(MOZILLA_LOCAL_BACKUP_FILE)" ; \
@ENABLE_PLUGIN_TRUE@	  fi ; \
@ENABLE_PLUGIN_TRUE@	  pushd $(MOZILLA_LOCAL_PLUGINDIR) ; \
@ENABLE_PLUGIN_TRUE@	  ln -s $(DESTDIR)$(libdir)/$(BUILT_PLUGIN_LIBRARY) $(PLUGIN_LINK_NAME) ; \
@ENABLE_PLUGIN_TRUE@	  echo "$(DESTDIR)$(libdir)/$(BUILT_PLUGIN_LIBRARY) linked as  $$PWD/$(PLUGIN_LINK_NAME)" ; \
@ENABLE_PLUGIN_TRUE@	  popd ; \
@ENABLE_PLUGIN_TRUE@	fi ; \
@ENABLE_PLUGIN_TRUE@	touch $@

@ENABLE_PLUGIN_TRUE@restore-user-links:
@ENABLE_PLUGIN_TRUE@	if [ $(MOZILLA_FAMILY_TEST) ]  ; then  \
@ENABLE_PLUGIN_TRUE@	  if [ -e $(MOZILLA_LOCAL_BACKUP_FILE) ] ; then \
@ENABLE_PLUGIN_TRUE@	    mv -f  $(MOZILLA_LOCAL_BACKUP_FILE)  $(MOZILLA_LOCAL_PLUGINDIR)/$(PLUGIN_LINK_NAME) ; \
@ENABLE_PLUGIN_TRUE@	    echo "$(MOZILLA_LOCAL_BACKUP_FILE) restored as $(MOZILLA_LOCAL_PLUGINDIR)/$(PLUGIN_LINK_NAME)" ; \
@ENABLE_PLUGIN_TRUE@	  else \
@ENABLE_PLUGIN_TRUE@	    rm -f $(MOZILLA_LOCAL_PLUGINDIR)/$(PLUGIN_LINK_NAME) ; \
@ENABLE_PLUGIN_TRUE@	    echo "$(MOZILLA_LOCAL_BACKUP_FILE) do not exists, nothing to be restored. $(MOZILLA_LOCAL_PLUGINDIR)/$(PLUGIN_LINK_NAME) removed" ; \
@ENABLE_PLUGIN_TRUE@	  fi ; \
@ENABLE_PLUGIN_TRUE@	fi ;
@ENABLE_PLUGIN_TRUE@	if [ -e stamps/user-links.stamp ] ; then \
@ENABLE_PLUGIN_TRUE@	  rm -f stamps/user-links.stamp ; \
@ENABLE_PLUGIN_TRUE@	fi

@ENABLE_PLUGIN_TRUE@stamps/global-links.stamp: stamps/netx-dist.stamp stamps/plugin.stamp launcher.build/$(javaws) \
@ENABLE_PLUGIN_TRUE@ stamps/netx.stamp $(DESTDIR)$(libdir)/$(BUILT_PLUGIN_LIBRARY)
@ENABLE_PLUGIN_TRUE@	if [ $(MOZILLA_FAMILY_TEST) ]  ; then  \
@ENABLE_PLUGIN_TRUE@	    dir="$(MOZILLA_GLOBAL32_PLUGINDIR)"  ; \
@ENABLE_PLUGIN_TRUE@	    arch=`arch`  ; \
@ENABLE_PLUGIN_TRUE@	    if [ "$$arch" = "x86_64" ]  ; then \
@ENABLE_PLUGIN_TRUE@	      dir="$(MOZILLA_GLOBAL64_PLUGINDIR)"  ; \
@ENABLE_PLUGIN_TRUE@	    fi ; \
@ENABLE_PLUGIN_TRUE@	    if [ -e "$$dir"/$(PLUGIN_LINK_NAME) ] ; then \
@ENABLE_PLUGIN_TRUE@	      mv -f "$$dir"/$(PLUGIN_LINK_NAME)  $(MOZILLA_GLOBAL_BACKUP_FILE) ; \
@ENABLE_PLUGIN_TRUE@	      echo "$$dir/$(PLUGIN_LINK_NAME) backed up as  $(MOZILLA_GLOBAL_BACKUP_FILE)" ; \
@ENABLE_PLUGIN_TRUE@	    else \
@ENABLE_PLUGIN_TRUE@	      echo "$$dir/$(PLUGIN_LINK_NAME) do not exists, nothing to be backed up to $(MOZILLA_GLOBAL_BACKUP_FILE)" ; \
@ENABLE_PLUGIN_TRUE@	    fi ; \
@ENABLE_PLUGIN_TRUE@	    pushd "$$dir"  ; \
@ENABLE_PLUGIN_TRUE@	    ln -s $(DESTDIR)$(libdir)/$(BUILT_PLUGIN_LIBRARY) $(PLUGIN_LINK_NAME)  ; \
@ENABLE_PLUGIN_TRUE@	    echo "$(DESTDIR)$(libdir)/$(BUILT_PLUGIN_LIBRARY) linked as  $$PWD/$(PLUGIN_LINK_NAME)" ; \
@ENABLE_PLUGIN_TRUE@	    popd  ; \
@ENABLE_PLUGIN_TRUE@	fi ; 
@ENABLE_PLUGIN_TRUE@	if [ "$(OPERA)" != "" ]  ; then \
@ENABLE_PLUGIN_TRUE@	    dir="$(OPERA_GLOBAL32_PLUGINDIR)"  ; \
@ENABLE_PLUGIN_TRUE@	    arch=`arch`  ; \
@ENABLE_PLUGIN_TRUE@	    if [ "$$arch" = "x86_64" ] ; then \
@ENABLE_PLUGIN_TRUE@	      dir="$(OPERA_GLOBAL64_PLUGINDIR)" ; \
@ENABLE_PLUGIN_TRUE@	    fi ; \
@ENABLE_PLUGIN_TRUE@	    if [ -e "$$dir"/$(PLUGIN_LINK_NAME) ] ; then \
@ENABLE_PLUGIN_TRUE@	      mv -f "$$dir"/$(PLUGIN_LINK_NAME)  $(OPERA_GLOBAL_BACKUP_FILE) ; \
@ENABLE_PLUGIN_TRUE@	      echo "$$dir/$(PLUGIN_LINK_NAME) backed up as  $(OPERA_GLOBAL_BACKUP_FILE) "; \
@ENABLE_PLUGIN_TRUE@	    else \
@ENABLE_PLUGIN_TRUE@	      echo "$$dir/$(PLUGIN_LINK_NAME) do not exists, nothing to be backed up to $(OPERA_GLOBAL_BACKUP_FILE) "; \
@ENABLE_PLUGIN_TRUE@	    fi ; \
@ENABLE_PLUGIN_TRUE@	    pushd "$$dir"  ; \
@ENABLE_PLUGIN_TRUE@	    ln -s $(DESTDIR)$(libdir)/$(BUILT_PLUGIN_LIBRARY) $(PLUGIN_LINK_NAME)  ; \
@ENABLE_PLUGIN_TRUE@	    echo "$(DESTDIR)$(libdir)/$(BUILT_PLUGIN_LIBRARY) linked as  $$PWD/$(PLUGIN_LINK_NAME)" ; \
@ENABLE_PLUGIN_TRUE@	    popd  ; \
@ENABLE_PLUGIN_TRUE@	fi   ; \
@ENABLE_PLUGIN_TRUE@	touch $@

@ENABLE_PLUGIN_TRUE@restore-global-links:
@ENABLE_PLUGIN_TRUE@	if [ $(MOZILLA_FAMILY_TEST) ]  ; then  \
@ENABLE_PLUGIN_TRUE@	    dir="$(MOZILLA_GLOBAL32_PLUGINDIR)"  ; \
@ENABLE_PLUGIN_TRUE@	    arch=`arch`  ; \
@ENABLE_PLUGIN_TRUE@	    if [ "$$arch" = "x86_64" ]  ; then \
@ENABLE_PLUGIN_TRUE@	      dir="$(MOZILLA_GLOBAL64_PLUGINDIR)"  ; \
@ENABLE_PLUGIN_TRUE@	    fi ; \
@ENABLE_PLUGIN_TRUE@	    if [ -e $(MOZILLA_GLOBAL_BACKUP_FILE) ] ; then \
@ENABLE_PLUGIN_TRUE@	      mv -f $(MOZILLA_GLOBAL_BACKUP_FILE) "$$dir"/$(PLUGIN_LINK_NAME) ; \
@ENABLE_PLUGIN_TRUE@	      echo "$(MOZILLA_GLOBAL_BACKUP_FILE) restored as $$dir/$(PLUGIN_LINK_NAME)" ; \
@ENABLE_PLUGIN_TRUE@	    else \
@ENABLE_PLUGIN_TRUE@	      rm -f "$$dir"/$(PLUGIN_LINK_NAME) ; \
@ENABLE_PLUGIN_TRUE@	      echo "$(MOZILLA_GLOBAL_BACKUP_FILE) do not exists, nothing to be restored. $$dir/$(PLUGIN_LINK_NAME) removed" ; \
@ENABLE_PLUGIN_TRUE@	    fi ; \
@ENABLE_PLUGIN_TRUE@	fi ; 
@ENABLE_PLUGIN_TRUE@	if [ "$(OPERA)" != "" ]  ; then \
@ENABLE_PLUGIN_TRUE@	    dir="$(OPERA_GLOBAL32_PLUGINDIR)"  ; \
@ENABLE_PLUGIN_TRUE@	    arch=`arch`  ; \
@ENABLE_PLUGIN_TRUE@	    if [ "$$arch" = "x86_64" ] ; then \
@ENABLE_PLUGIN_TRUE@	      dir="$(OPERA_GLOBAL64_PLUGINDIR)" ; \
@ENABLE_PLUGIN_TRUE@	    fi ; \
@ENABLE_PLUGIN_TRUE@	    if [ -e $(OPERA_GLOBAL_BACKUP_FILE) ] ; then \
@ENABLE_PLUGIN_TRUE@	      mv -f $(OPERA_GLOBAL_BACKUP_FILE) "$$dir"/$(PLUGIN_LINK_NAME) ; \
@ENABLE_PLUGIN_TRUE@	      echo "$(OPERA_GLOBAL_BACKUP_FILE)  restored as $$dir/$(PLUGIN_LINK_NAME)" ; \
@ENABLE_PLUGIN_TRUE@	    else \
@ENABLE_PLUGIN_TRUE@	      rm -f "$$dir"/$(PLUGIN_LINK_NAME) ; \
@ENABLE_PLUGIN_TRUE@	      echo "$(OPERA_GLOBAL_BACKUP_FILE) do not exist, nothing to be restored. $$dir/$(PLUGIN_LINK_NAME) removed" ; \
@ENABLE_PLUGIN_TRUE@	    fi ; \
@ENABLE_PLUGIN_TRUE@	fi   ;
@ENABLE_PLUGIN_TRUE@	if [ -e stamps/global-links.stamp ] ; then \
@ENABLE_PLUGIN_TRUE@	  rm -f stamps/global-links.stamp ; \
@ENABLE_PLUGIN_TRUE@	fi

netx-unit-tests-source-files.txt:
	find $(NETX_UNIT_TEST_SRCDIR) -name '*.java' | sort > $@

stamps/netx-unit-tests-compile.stamp: stamps/netx.stamp \
 netx-unit-tests-source-files.txt stamps/test-extensions-compile.stamp
	mkdir -p $(NETX_UNIT_TEST_DIR) && \
	$(BOOT_DIR)/bin/javac $(IT_JAVACFLAGS) \
	 -d $(NETX_UNIT_TEST_DIR) \
	 -classpath $(JUNIT_JAR):$(abs_top_builddir)/liveconnect/lib/classes.jar:$(NETX_DIR)/lib/classes.jar:$(TEST_EXTENSIONS_DIR):$(TAGSOUP_JAR) \
	 @netx-unit-tests-source-files.txt && \
	mkdir -p stamps && \
	touch $@

$(TESTS_DIR)/$(REPORT_STYLES_DIRNAME):
	mkdir $(TESTS_DIR)/$(REPORT_STYLES_DIRNAME)
	cp $(TESTS_SRCDIR)/$(REPORT_STYLES_DIRNAME)/*.css $(TESTS_DIR)/$(REPORT_STYLES_DIRNAME)/
	cp $(TESTS_SRCDIR)/$(REPORT_STYLES_DIRNAME)/*.js $(TESTS_DIR)/$(REPORT_STYLES_DIRNAME)/

$(UNIT_CLASS_NAMES):
	cd $(NETX_UNIT_TEST_DIR) ; \
	class_names= ; \
	for test in `find -type f` ; do \
	  class_name=`echo $$test | sed -e 's|\.class$$||' -e 's|^\./||'` ; \
	  class_name=`echo $$class_name | sed -e 's|/|.|g' ` ; \
	  class_names="$$class_names $$class_name" ; \
	done ; \
	echo $$class_names > $(UNIT_CLASS_NAMES);

stamps/run-netx-unit-tests.stamp: stamps/netx-unit-tests-compile.stamp $(JUNIT_RUNNER_JAR)  \
 $(TESTS_DIR)/$(REPORT_STYLES_DIRNAME)  $(UNIT_CLASS_NAMES)
	filename=" " ; \
	cd $(NETX_UNIT_TEST_SRCDIR) ; \
	for file in `find . -type f \! -iname "*.java"`; do\
		filename=`echo $$file `; \
		cp --parents $$filename $(NETX_UNIT_TEST_DIR) ; \
	done ; \
	cd $(NETX_UNIT_TEST_DIR) ; \
	class_names=`cat $(UNIT_CLASS_NAMES)` ; \
	CLASSPATH=$(NETX_DIR)/lib/classes.jar:$(abs_top_builddir)/liveconnect/lib/classes.jar:$(JUNIT_JAR):$(JUNIT_RUNNER_JAR):$(TEST_EXTENSIONS_DIR):.:$(TEST_EXTENSIONS_SRCDIR):$(TAGSOUP_JAR) ; \
	  $(BOOT_DIR)/bin/java -Xbootclasspath/a:$(RUNTIME):$$CLASSPATH CommandLine $$class_names 
@WITH_XSLTPROC_TRUE@	-$(XSLTPROC) --stringparam logs logs_unit.html $(TESTS_SRCDIR)/$(REPORT_STYLES_DIRNAME)/jreport.xsl $(NETX_UNIT_TEST_DIR)/tests-output.xml > $(TESTS_DIR)/index_unit.html
@WITH_XSLTPROC_TRUE@	-$(XSLTPROC) $(TESTS_SRCDIR)/$(REPORT_STYLES_DIRNAME)/logs.xsl $(NETX_UNIT_TEST_DIR)/ServerAccess-logs.xml > $(TESTS_DIR)/logs_unit.html
@WITH_XSLTPROC_TRUE@	-$(XSLTPROC) $(TESTS_SRCDIR)/$(REPORT_STYLES_DIRNAME)/textreport.xsl $(NETX_UNIT_TEST_DIR)/tests-output.xml > $(TESTS_DIR)/summary_unit.txt
	mkdir -p stamps && \
	touch $@

#warning,  during this target tests.build/netx/unit/tests-output.xml is backup and rewriten (but not coresponding html file)
#xml results run from emma sandbox, however, can be wrong, co the new tests-output.xml is then renamed and orginal one restored
#you can add -ix "-*Test*" -ix "-*test*"  to ignore all test cases from statistics
stamps/run-unit-test-code-coverage.stamp: stamps/netx-unit-tests-compile.stamp $(JUNIT_RUNNER_JAR)  \
 $(TESTS_DIR)/$(REPORT_STYLES_DIRNAME)  $(UNIT_CLASS_NAMES)
@WITH_EMMA_TRUE@	cd $(NETX_UNIT_TEST_DIR) ; \
@WITH_EMMA_TRUE@	for file in $(EMMA_MODIFIED_FILES) ; do \
@WITH_EMMA_TRUE@	  mv $(NETX_UNIT_TEST_DIR)/$$file  $(NETX_UNIT_TEST_DIR)/"$$file""$(EMMA_BACKUP_SUFFIX)" ; \
@WITH_EMMA_TRUE@	done ;\
@WITH_EMMA_TRUE@	class_names=`cat $(UNIT_CLASS_NAMES)` ; \
@WITH_EMMA_TRUE@	CLASSPATH=$(NETX_DIR)/lib/classes.jar:$(abs_top_builddir)/liveconnect/lib/classes.jar:$(JUNIT_JAR):$(JUNIT_RUNNER_JAR):$(TEST_EXTENSIONS_DIR):.:$(TEST_EXTENSIONS_SRCDIR) ; \
@WITH_EMMA_TRUE@	$(BOOT_DIR)/bin/java $(EMMA_JAVA_ARGS) -Xbootclasspath/a:$(RUNTIME):$$CLASSPATH -cp $(EMMA_JAR) -Demma.report.html.out.encoding=UTF-8 emmarun \
@WITH_EMMA_TRUE@	 -Dreport.html.out.encoding=UTF-8 \
@WITH_EMMA_TRUE@	 -raw \
@WITH_EMMA_TRUE@	 -sp $(NETX_SRCDIR) \
@WITH_EMMA_TRUE@	 -sp $(NETX_UNIT_TEST_SRCDIR) \
@WITH_EMMA_TRUE@	 -sp $(JUNIT_RUNNER_SRCDIR) \
@WITH_EMMA_TRUE@	 -r html \
@WITH_EMMA_TRUE@	 -r xml \
@WITH_EMMA_TRUE@	 -cp $(NETX_DIR)/lib/classes.jar \
@WITH_EMMA_TRUE@	 -cp $(JUNIT_JAR) \
@WITH_EMMA_TRUE@	 -cp $(JUNIT_RUNNER_JAR) \
@WITH_EMMA_TRUE@	 -cp $(BOOT_DIR)/jre/lib/rt.jar \
@WITH_EMMA_TRUE@	 -cp $(BOOT_DIR)/jre/lib/jsse.jar \
@WITH_EMMA_TRUE@	 -cp $(BOOT_DIR)/jre/lib/resources.jar \
@WITH_EMMA_TRUE@	 -cp $(RHINO_RUNTIME) \
@WITH_EMMA_TRUE@	 -cp $(TEST_EXTENSIONS_DIR) \
@WITH_EMMA_TRUE@	 -cp $(TEST_EXTENSIONS_SRCDIR) \
@WITH_EMMA_TRUE@if HAVE_TAGSOUP
@WITH_EMMA_TRUE@	 -cp $(TAGSOUP_JAR) \
@WITH_EMMA_TRUE@endif
@WITH_EMMA_TRUE@	 -cp . \
@WITH_EMMA_TRUE@	 -ix "-org.junit.*" \
@WITH_EMMA_TRUE@	 -ix "-junit.*" \
@WITH_EMMA_TRUE@	 CommandLine $$class_names ;  \
@WITH_EMMA_TRUE@	for file in $(EMMA_MODIFIED_FILES) ; do \
@WITH_EMMA_TRUE@	  mv $(NETX_UNIT_TEST_DIR)/$$file  $(NETX_UNIT_TEST_DIR)/"$$file""$(EMMA_SUFFIX)" ; \
@WITH_EMMA_TRUE@	  mv $(NETX_UNIT_TEST_DIR)/"$$file""$(EMMA_BACKUP_SUFFIX)"  $(NETX_UNIT_TEST_DIR)/$$file ; \
@WITH_EMMA_TRUE@	done ;
@WITH_EMMA_FALSE@	echo "Sorry, coverage report cant be run without emma installed. Try install emma or specify with-emma value" ;
@WITH_EMMA_FALSE@	exit 5
	touch $@

stamps/compile-jacoco-operator.stamp: jacoco-operator-source-files.txt
@WITH_JACOCO_TRUE@	mkdir -p $(JACOCO_OPERATOR_DIR) && \
@WITH_JACOCO_TRUE@	$(BOOT_DIR)/bin/javac $(IT_JAVACFLAGS) \
@WITH_JACOCO_TRUE@	  -d $(JACOCO_OPERATOR_DIR) \
@WITH_JACOCO_TRUE@	  -classpath $(JACOCO_CLASSPATH) \
@WITH_JACOCO_TRUE@	  @jacoco-operator-source-files.txt ;
@WITH_JACOCO_FALSE@	echo "Sorry, jacoco coverage report generator  cant be compiled without jacoco installed. Try installing jacoco or specify with-jacoco value" ;
@WITH_JACOCO_FALSE@	exit 5
	touch $@

#warning,  during this target tests.build/netx/unit/tests-output.xml is backup and rewriten (but not coresponding html file)
#xml results run with jacoco agent however, can be wrong, co the new tests-output.xml is then renamed and orginal one restored
stamps/run-unit-test-code-coverage-jacoco.stamp: stamps/netx-unit-tests-compile.stamp $(JUNIT_RUNNER_JAR)  \
 $(TESTS_DIR)/$(REPORT_STYLES_DIRNAME)  $(UNIT_CLASS_NAMES) stamps/compile-jacoco-operator.stamp
@WITH_JACOCO_TRUE@	filename=" " ; \
@WITH_JACOCO_TRUE@	cd $(NETX_UNIT_TEST_SRCDIR) ; \
@WITH_JACOCO_TRUE@	for file in `find . -type f \! -iname "*.java"`; do\
@WITH_JACOCO_TRUE@		filename=`echo $$file `; \
@WITH_JACOCO_TRUE@		cp --parents $$filename $(NETX_UNIT_TEST_DIR) ; \
@WITH_JACOCO_TRUE@	done ; \
@WITH_JACOCO_TRUE@	cd $(NETX_UNIT_TEST_DIR) ; \
@WITH_JACOCO_TRUE@	for file in $(EMMA_MODIFIED_FILES) ; do \
@WITH_JACOCO_TRUE@	  mv $(NETX_UNIT_TEST_DIR)/$$file  $(NETX_UNIT_TEST_DIR)/"$$file""$(EMMA_BACKUP_SUFFIX)" ; \
@WITH_JACOCO_TRUE@	done ;\
@WITH_JACOCO_TRUE@	class_names=`cat $(UNIT_CLASS_NAMES)` ; \
@WITH_JACOCO_TRUE@	CLASSPATH=$(NETX_DIR)/lib/classes.jar:$(abs_top_builddir)/liveconnect/lib/classes.jar:$(JUNIT_JAR):$(JUNIT_RUNNER_JAR):$(TEST_EXTENSIONS_DIR):$(JACOCO_CLASSPATH):.:$(TEST_EXTENSIONS_SRCDIR):$(TAGSOUP_JAR) ; \
@WITH_JACOCO_TRUE@	  $(BOOT_DIR)/bin/java $(JACOCO_AGENT_SWITCH) -Xbootclasspath/a:$(RUNTIME):$$CLASSPATH  CommandLine $$class_names ; \
@WITH_JACOCO_TRUE@	for file in $(EMMA_MODIFIED_FILES) ; do \
@WITH_JACOCO_TRUE@	  mv $(NETX_UNIT_TEST_DIR)/$$file  $(NETX_UNIT_TEST_DIR)/"$$file""$(EMMA_SUFFIX)" ; \
@WITH_JACOCO_TRUE@	  mv $(NETX_UNIT_TEST_DIR)/"$$file""$(EMMA_BACKUP_SUFFIX)"  $(NETX_UNIT_TEST_DIR)/$$file ; \
@WITH_JACOCO_TRUE@	done ; \
@WITH_JACOCO_TRUE@	$(JACOCO_OPERATOR_EXEC) \
@WITH_JACOCO_TRUE@	  report --die-soon --html-output coverage --xml-output coverage.xml --input-file jacoco.exec \
@WITH_JACOCO_TRUE@	  --input-srcs  $(NETX_SRCDIR) $(PLUGIN_SRCDIR)/java $(NETX_UNIT_TEST_SRCDIR) $(JUNIT_RUNNER_SRCDIR) $(TEST_EXTENSIONS_SRCDIR) \
@WITH_JACOCO_TRUE@	  --input-builds $(NETX_DIR)/lib/classes.jar $(abs_top_builddir)/liveconnect/lib/classes.jar $(NETX_UNIT_TEST_DIR) $(JUNIT_RUNNER_JAR)  $(TEST_EXTENSIONS_DIR) \
@WITH_JACOCO_TRUE@	  --title "IcedTea-Web unit-tests codecoverage" ;
@WITH_JACOCO_FALSE@	echo "Sorry, coverage report cant be run without jacoco installed. Try installing jacoco or specify with-jacoco value" ;
@WITH_JACOCO_FALSE@	exit 5
	touch $@

#warning,  during this target tests.build/netx/jnlp_testsengine/tests-output.xml is backup and rewriten (but not coresponding html file)
#xml results run from emma sandbox, however, can be wrong, co the new tests-output.xml is then renamed and orginal one restored
stamps/run-reproducers-test-code-coverage.stamp: stamps/run-netx-dist-tests.stamp $(REPRODUCERS_CLASS_NAMES)
@WITH_EMMA_TRUE@	cd $(TESTS_DIR) ; \
@WITH_EMMA_TRUE@	for file in $(EMMA_MODIFIED_FILES) ; do \
@WITH_EMMA_TRUE@	  mv $(TEST_EXTENSIONS_DIR)/$$file $(TEST_EXTENSIONS_DIR)/"$$file""$(EMMA_BACKUP_SUFFIX)" ; \
@WITH_EMMA_TRUE@	done ;\
@WITH_EMMA_TRUE@	echo "backuping javaws and netx.jar in $(DESTDIR)" ; \
@WITH_EMMA_TRUE@	netx_backup=$(DESTDIR)$(datadir)/$(PACKAGE_NAME)/netx_backup.jar ; \
@WITH_EMMA_TRUE@	javaws_backup=$(DESTDIR)$(bindir)/javaws_backup ; \
@WITH_EMMA_TRUE@	mv $(DESTDIR)$(bindir)/javaws $$javaws_backup ;  \
@WITH_EMMA_TRUE@	mv $(DESTDIR)$(datadir)/$(PACKAGE_NAME)/netx.jar $$netx_backup ; \
@WITH_EMMA_TRUE@	nw_bootclasspath="$(LAUNCHER_BOOTCLASSPATH):$(EMMA_JAR):$$netx_backup" ; \
@WITH_EMMA_TRUE@	instructed_dir=$(TESTS_DIR)/instr ; \
@WITH_EMMA_TRUE@	echo "instrumenting netx.jar from $$netx_backup through $$instructed_dir" ; \
@WITH_EMMA_TRUE@	$(BOOT_DIR)/bin/java -cp  $(EMMA_JAR) emma instr -d $$instructed_dir -ip $$netx_backup ; \
@WITH_EMMA_TRUE@	pushd $$instructed_dir ; \
@WITH_EMMA_TRUE@	$(BOOT_DIR)/bin/jar -cf $(DESTDIR)$(datadir)/$(PACKAGE_NAME)/netx.jar * ; \
@WITH_EMMA_TRUE@	popd ; \
@WITH_EMMA_TRUE@	rm -rf $$instructed_dir ; \
@WITH_EMMA_TRUE@	echo "patching $(javaws)" ; \
@WITH_EMMA_TRUE@	cat $$javaws_backup | sed "s,$(LAUNCHER_BOOTCLASSPATH),$$nw_bootclasspath," > $(DESTDIR)$(bindir)/$(javaws) ; \
@WITH_EMMA_TRUE@	chmod 777 $(DESTDIR)$(bindir)/$(javaws) ; \
@WITH_EMMA_TRUE@	testcases_srcs=( ) ; \
@WITH_EMMA_TRUE@	k=0 ; \
@WITH_EMMA_TRUE@	types=($(ALL_REPRODUCERS)); \
@WITH_EMMA_TRUE@	for which in "$${types[@]}" ; do \
@WITH_EMMA_TRUE@	  . $(abs_top_srcdir)/NEW_LINE_IFS ; \
@WITH_EMMA_TRUE@	  simpleReproducers=(`cat $(abs_top_builddir)/junit-jnlp-dist-$$which.txt `); \
@WITH_EMMA_TRUE@	  IFS="$$IFS_BACKUP" ; \
@WITH_EMMA_TRUE@	  for dir in "$${simpleReproducers[@]}" ; do \
@WITH_EMMA_TRUE@	    testcases_srcs[k]="-sp" ; \
@WITH_EMMA_TRUE@	    k=$$((k+1)) ; \
@WITH_EMMA_TRUE@	    testcases_srcs[k]="$(REPRODUCERS_TESTS_SRCDIR)/$$which/$$dir/testcases/" ; \
@WITH_EMMA_TRUE@	    k=$$((k+1)) ; \
@WITH_EMMA_TRUE@	    done ; \
@WITH_EMMA_TRUE@	  done ; \
@WITH_EMMA_TRUE@	cd $(TEST_EXTENSIONS_DIR) ; \
@WITH_EMMA_TRUE@	class_names=`cat $(REPRODUCERS_CLASS_NAMES)` ; \
@WITH_EMMA_TRUE@	CLASSPATH=$(NETX_DIR)/lib/classes.jar:$(abs_top_builddir)/liveconnect/lib/classes.jar:$(JUNIT_JAR):$(JUNIT_RUNNER_JAR):$(TEST_EXTENSIONS_DIR):.:$(TEST_EXTENSIONS_SRCDIR) ; \
@WITH_EMMA_TRUE@	$(BOOT_DIR)/bin/java  \
@WITH_EMMA_TRUE@	 $(EMMA_JAVA_ARGS) \
@WITH_EMMA_TRUE@	  $(REPRODUCERS_DPARAMETERS) \
@WITH_EMMA_TRUE@	 -Xbootclasspath/a:$(RUNTIME):$$CLASSPATH -cp $(EMMA_JAR) emmarun  \
@WITH_EMMA_TRUE@	   -raw \
@WITH_EMMA_TRUE@	   -cp $(NETX_DIR)/lib/classes.jar \
@WITH_EMMA_TRUE@	   -cp $(JUNIT_JAR) \
@WITH_EMMA_TRUE@	   -cp $(JUNIT_RUNNER_JAR) \
@WITH_EMMA_TRUE@	   -cp $(BOOT_DIR)/jre/lib/rt.jar \
@WITH_EMMA_TRUE@	   -cp $(BOOT_DIR)/jre/lib/jsse.jar \
@WITH_EMMA_TRUE@	   -cp $(BOOT_DIR)/jre/lib/resources.jar \
@WITH_EMMA_TRUE@	   -cp $(RHINO_RUNTIME) \
@WITH_EMMA_TRUE@	   -cp . \
@WITH_EMMA_TRUE@	   -cp $(TEST_EXTENSIONS_SRCDIR) \
@WITH_EMMA_TRUE@	   -cp $(TEST_EXTENSIONS_TESTS_DIR) \
@WITH_EMMA_TRUE@	   -ix "-org.junit.*" \
@WITH_EMMA_TRUE@	   -ix "-junit.*" \
@WITH_EMMA_TRUE@	   CommandLine $$class_names ; \
@WITH_EMMA_TRUE@	mv $(TEST_EXTENSIONS_DIR)/coverage.ec $(TEST_EXTENSIONS_DIR)/coverageX.ec ; \
@WITH_EMMA_TRUE@	mv $(TEST_EXTENSIONS_DIR)/coverage.es $(TEST_EXTENSIONS_DIR)/coverageX.es ; \
@WITH_EMMA_TRUE@	$(BOOT_DIR)/bin/java $(EMMA_JAVA_ARGS) -cp $(EMMA_JAR) emma merge \
@WITH_EMMA_TRUE@	  -in $(TESTS_DIR)/coverage.em \
@WITH_EMMA_TRUE@	  -in $(TEST_EXTENSIONS_DIR)/coverageX.ec \
@WITH_EMMA_TRUE@	  -in $(TEST_EXTENSIONS_DIR)/coverageX.es ; \
@WITH_EMMA_TRUE@	$(BOOT_DIR)/bin/java $(EMMA_JAVA_ARGS) -cp $(EMMA_JAR)  -Demma.report.html.out.encoding=UTF-8 emma report \
@WITH_EMMA_TRUE@	  -Dreport.html.out.encoding=UTF-8 \
@WITH_EMMA_TRUE@	  -in $(TEST_EXTENSIONS_DIR)/coverage.es  \
@WITH_EMMA_TRUE@	  -sp $(NETX_SRCDIR) \
@WITH_EMMA_TRUE@	  -sp $(NETX_UNIT_TEST_SRCDIR) \
@WITH_EMMA_TRUE@	  -sp $(JUNIT_RUNNER_SRCDIR) \
@WITH_EMMA_TRUE@	  -sp $(TEST_EXTENSIONS_SRCDIR) \
@WITH_EMMA_TRUE@	  -sp $(TEST_EXTENSIONS_TESTS_SRCDIR) \
@WITH_EMMA_TRUE@	  -r html \
@WITH_EMMA_TRUE@	  -r xml \
@WITH_EMMA_TRUE@	  "$${testcases_srcs[@]}" ; \
@WITH_EMMA_TRUE@	echo "restoring javaws and netx.jar in $(DESTDIR)" ; \
@WITH_EMMA_TRUE@	rm -f $(DESTDIR)$(bindir)/$(javaws) $(DESTDIR)$(datadir)/$(PACKAGE_NAME)/netx.jar ; \
@WITH_EMMA_TRUE@	rm -f $(DESTDIR)$(bindir)/$(javaws);  \
@WITH_EMMA_TRUE@	mv $$javaws_backup $(DESTDIR)$(bindir)/$(javaws);  \
@WITH_EMMA_TRUE@	mv $$netx_backup $(DESTDIR)$(datadir)/$(PACKAGE_NAME)/netx.jar ; \
@WITH_EMMA_TRUE@	for file in $(EMMA_MODIFIED_FILES) ; do \
@WITH_EMMA_TRUE@	  mv $(TEST_EXTENSIONS_DIR)/$$file  $(TEST_EXTENSIONS_DIR)/"$$file""$(EMMA_SUFFIX)" ; \
@WITH_EMMA_TRUE@	  mv $(TEST_EXTENSIONS_DIR)/"$$file""$(EMMA_BACKUP_SUFFIX)"  $(TEST_EXTENSIONS_DIR)/$$file ; \
@WITH_EMMA_TRUE@	done ;\
@WITH_EMMA_TRUE@	rm $(TEST_EXTENSIONS_DIR)/coverage.txt ; 
@WITH_EMMA_FALSE@	echo "Sorry, coverage report cant be run without emma installed. Try install emma or specify with-emma value" ;
@WITH_EMMA_FALSE@	exit 5
	touch $@

$(COVERABLE_PLUGIN_DIR):
	mkdir -p $(COVERABLE_PLUGIN_DIR);

$(COVERABLE_PLUGIN_DIR)/%.o: $(PLUGIN_SRCDIR)/%.cc
	cd $(COVERABLE_PLUGIN_DIR) && \
	$(CXX) $(CXXFLAGS) \
	   $(DEFS) $(VERSION_DEFS) \
	  -DJDK_UPDATE_VERSION="\"$(JDK_UPDATE_VERSION)\"" \
	  -DPLUGIN_NAME="\"IcedTea-Web Plugin with jacoco coverage agent\"" \
	  -DPLUGIN_VERSION="\"$(PLUGIN_VERSION)\"" \
	  -DPACKAGE_URL="\"$(PACKAGE_URL)\"" \
	  -DMOZILLA_VERSION_COLLAPSED="$(MOZILLA_VERSION_COLLAPSED)" \
	  -DICEDTEA_WEB_JRE="\"$(SYSTEM_JRE_DIR)\"" \
	  -DPLUGIN_BOOTCLASSPATH=$(PLUGIN_COVERAGE_BOOTCLASSPATH) \
	  -DCOVERAGE_AGENT=$(JACOCO_AGENT_PLUGIN_SWITCH) \
	  $(GLIB_CFLAGS) \
	  $(MOZILLA_CFLAGS) \
	  -fvisibility=hidden \
	  -fPIC -o $@ -c $<

$(COVERABLE_PLUGIN_DIR)/$(BUILT_PLUGIN_LIBRARY): $(addprefix $(COVERABLE_PLUGIN_DIR)/,$(PLUGIN_OBJECTS))
	cd $(COVERABLE_PLUGIN_DIR) && \
	$(CXX) $(CXXFLAGS) \
	  $(PLUGIN_OBJECTS) \
	  $(GLIB_LIBS) \
	  $(MOZILLA_LIBS) \
	  -shared -o $@

stamps/build-fake-plugin.stamp:  $(COVERABLE_PLUGIN_DIR)  $(addprefix $(PLUGIN_SRCDIR)/,$(PLUGIN_SRC)) $(addprefix $(COVERABLE_PLUGIN_DIR)/,$(PLUGIN_OBJECTS)) stamps/liveconnect-dist.stamp  $(COVERABLE_PLUGIN_DIR)/$(BUILT_PLUGIN_LIBRARY)
	touch $@

#warning,  during this target tests.build/netx/jnlp_testsengine/tests-output.xml is backup and rewriten (but not coresponding html file)
#xml results run with jacoco agent, however, can be wrong, co the new tests-output.xml is then renamed and orginal one restored
stamps/run-reproducers-test-code-coverage-jacoco.stamp: stamps/run-netx-dist-tests.stamp $(REPRODUCERS_CLASS_NAMES) \
stamps/compile-jacoco-operator.stamp stamps/build-fake-plugin.stamp
@WITH_JACOCO_TRUE@	cd $(TESTS_DIR) ; \
@WITH_JACOCO_TRUE@	for file in $(EMMA_MODIFIED_FILES) ; do \
@WITH_JACOCO_TRUE@	  mv $(TEST_EXTENSIONS_DIR)/$$file $(TEST_EXTENSIONS_DIR)/"$$file""$(EMMA_BACKUP_SUFFIX)" ; \
@WITH_JACOCO_TRUE@	done ;\
@WITH_JACOCO_TRUE@	echo "backuping javaws in $(DESTDIR)$(bindir)" ; \
@WITH_JACOCO_TRUE@	javaws_backup=$(DESTDIR)$(bindir)/javaws_backup ; \
@WITH_JACOCO_TRUE@	mv $(DESTDIR)$(bindir)/javaws $$javaws_backup ;  \
@WITH_JACOCO_TRUE@	echo "patching $(javaws)" ; \
@WITH_JACOCO_TRUE@	nw_bootclasspath="$(LAUNCHER_BOOTCLASSPATH):$(JACOCO_CLASSPATH)" ; \
@WITH_JACOCO_TRUE@	cat $$javaws_backup | sed "s|COMMAND.k.=\"..JAVA.\"|COMMAND[k]=\"\\$$\\{JAVA\\}\" ;  k=1 ; COMMAND[k]=$(JACOCO_AGENT_JAVAWS_SWITCH)|" | sed "s,$(LAUNCHER_BOOTCLASSPATH),$$nw_bootclasspath," > $(DESTDIR)$(bindir)/$(javaws) ; \
@WITH_JACOCO_TRUE@	chmod 777 $(DESTDIR)$(bindir)/$(javaws) ; \
@WITH_JACOCO_TRUE@	echo "backuping plugin in $(DESTDIR)/$(libdir)$(BUILT_PLUGIN_LIBRARY)" ; \
@WITH_JACOCO_TRUE@	plugin_backup=$(DESTDIR)$(libdir)/$(BUILT_PLUGIN_LIBRARY)_backup ; \
@WITH_JACOCO_TRUE@	mv $(DESTDIR)$(libdir)/$(BUILT_PLUGIN_LIBRARY) $$plugin_backup ;  \
@WITH_JACOCO_TRUE@	echo "fakeing plugin" ; \
@WITH_JACOCO_TRUE@	cp $(COVERABLE_PLUGIN_DIR)/$(BUILT_PLUGIN_LIBRARY) $(DESTDIR)$(libdir)/$(BUILT_PLUGIN_LIBRARY) ; \
@WITH_JACOCO_TRUE@	testcases_srcs=( ) ; \
@WITH_JACOCO_TRUE@	k=0 ; \
@WITH_JACOCO_TRUE@	types=($(ALL_REPRODUCERS)); \
@WITH_JACOCO_TRUE@	for which in "$${types[@]}" ; do \
@WITH_JACOCO_TRUE@	  . $(abs_top_srcdir)/NEW_LINE_IFS ; \
@WITH_JACOCO_TRUE@	  simpleReproducers=(`cat $(abs_top_builddir)/junit-jnlp-dist-$$which.txt `); \
@WITH_JACOCO_TRUE@	  IFS="$$IFS_BACKUP" ; \
@WITH_JACOCO_TRUE@	  for dir in "$${simpleReproducers[@]}" ; do \
@WITH_JACOCO_TRUE@	    testcases_srcs[k]="$(REPRODUCERS_TESTS_SRCDIR)/$$which/$$dir/testcases/" ; \
@WITH_JACOCO_TRUE@	    k=$$((k+1)) ; \
@WITH_JACOCO_TRUE@	    done ; \
@WITH_JACOCO_TRUE@	  done ; \
@WITH_JACOCO_TRUE@	cd $(TEST_EXTENSIONS_DIR) ; \
@WITH_JACOCO_TRUE@	class_names=`cat $(REPRODUCERS_CLASS_NAMES)` ; \
@WITH_JACOCO_TRUE@	CLASSPATH=$(NETX_DIR)/lib/classes.jar:$(JUNIT_JAR):$(JUNIT_RUNNER_JAR):.:$(TEST_EXTENSIONS_DIR):$(JACOCO_CLASSPATH):$(TEST_EXTENSIONS_TESTS_DIR):$(TEST_EXTENSIONS_SRCDIR) ; \
@WITH_JACOCO_TRUE@	  $(BOOT_DIR)/bin/java $(JACOCO_AGENT_SWITCH) $(REPRODUCERS_DPARAMETERS) \
@WITH_JACOCO_TRUE@	 -Xbootclasspath/a:$(RUNTIME):$$CLASSPATH CommandLine $$class_names ; \
@WITH_JACOCO_TRUE@	if [ -f $(JACOCO_JAVAWS_RESULTS) ] ; then \
@WITH_JACOCO_TRUE@	  jacoco_javaws_results=$(JACOCO_JAVAWS_RESULTS) ; \
@WITH_JACOCO_TRUE@	  $(JACOCO_OPERATOR_EXEC) \
@WITH_JACOCO_TRUE@	    report --die-soon --html-output coverage-javaws --xml-output coverage-javaws.xml --input-file $(JACOCO_JAVAWS_RESULTS) \
@WITH_JACOCO_TRUE@	    --input-srcs  $(NETX_SRCDIR) \
@WITH_JACOCO_TRUE@	    --input-builds $(NETX_DIR)/lib/classes.jar \
@WITH_JACOCO_TRUE@	    --title "IcedTea-Web javaws reproducers codecoverage" ; \
@WITH_JACOCO_TRUE@	fi; \
@WITH_JACOCO_TRUE@	if [ -f $(JACOCO_PLUGIN_RESULTS) ] ; then \
@WITH_JACOCO_TRUE@	  jacoco_plugin_results=$(JACOCO_PLUGIN_RESULTS) ; \
@WITH_JACOCO_TRUE@	  $(JACOCO_OPERATOR_EXEC) \
@WITH_JACOCO_TRUE@	    report --die-soon --html-output coverage-plugin --xml-output coverage-plugin.xml --input-file $(JACOCO_PLUGIN_RESULTS) \
@WITH_JACOCO_TRUE@	    --input-srcs  $(NETX_SRCDIR) $(PLUGIN_SRCDIR)/java \
@WITH_JACOCO_TRUE@	    --input-builds $(NETX_DIR)/lib/classes.jar $(abs_top_builddir)/liveconnect/lib/classes.jar \
@WITH_JACOCO_TRUE@	    --title "IcedTea-Web plugin reproducers codecoverage" ; \
@WITH_JACOCO_TRUE@	fi; \
@WITH_JACOCO_TRUE@	$(JACOCO_OPERATOR_EXEC) \
@WITH_JACOCO_TRUE@	  merge --die-soon --input-files jacoco.exec $$jacoco_javaws_results $$jacoco_plugin_results  --output-file jacoco-merged-reproducers.exec ; \
@WITH_JACOCO_TRUE@	$(JACOCO_OPERATOR_EXEC) \
@WITH_JACOCO_TRUE@	  report --html-output coverage --xml-output coverage.xml --input-file jacoco-merged-reproducers.exec \
@WITH_JACOCO_TRUE@	  --input-srcs  $(NETX_SRCDIR) $(PLUGIN_SRCDIR)/java  $(JUNIT_RUNNER_SRCDIR) $(TEST_EXTENSIONS_SRCDIR) $(TEST_EXTENSIONS_TESTS_SRCDIR) "$${testcases_srcs[@]}" \
@WITH_JACOCO_TRUE@	  --input-builds $(NETX_DIR)/lib/classes.jar $(abs_top_builddir)/liveconnect/lib/classes.jar  $(JUNIT_RUNNER_JAR)  $(TEST_EXTENSIONS_DIR) $(TEST_EXTENSIONS_TESTS_DIR) \
@WITH_JACOCO_TRUE@	  --title "IcedTea-Web reproducers-tests codecoverage" ; \
@WITH_JACOCO_TRUE@	echo "restoring javaws in $(DESTDIR)$(bindir)" ; \
@WITH_JACOCO_TRUE@	rm -f $(DESTDIR)$(bindir)/$(javaws);  \
@WITH_JACOCO_TRUE@	mv $$javaws_backup $(DESTDIR)$(bindir)/$(javaws);  \
@WITH_JACOCO_TRUE@	echo "restoring  plugin in $(DESTDIR)/$(libdir)$(BUILT_PLUGIN_LIBRARY)" ; \
@WITH_JACOCO_TRUE@	mv $$plugin_backup $(DESTDIR)$(libdir)/$(BUILT_PLUGIN_LIBRARY) ; \
@WITH_JACOCO_TRUE@	for file in $(EMMA_MODIFIED_FILES) ; do \
@WITH_JACOCO_TRUE@	  mv $(TEST_EXTENSIONS_DIR)/$$file  $(TEST_EXTENSIONS_DIR)/"$$file""$(EMMA_SUFFIX)" ; \
@WITH_JACOCO_TRUE@	  mv $(TEST_EXTENSIONS_DIR)/"$$file""$(EMMA_BACKUP_SUFFIX)"  $(TEST_EXTENSIONS_DIR)/$$file ; \
@WITH_JACOCO_TRUE@	done ;
@WITH_JACOCO_FALSE@	echo "Sorry, coverage report cant be run without jacoco installed. Try installing jacoco or specify with-jacoco value" ;
@WITH_JACOCO_FALSE@	exit 5
	touch $@

run-test-code-coverage-jacoco: stamps/run-unit-test-code-coverage-jacoco.stamp stamps/run-reproducers-test-code-coverage-jacoco.stamp
@WITH_JACOCO_TRUE@	cd $(TESTS_DIR) ; \
@WITH_JACOCO_TRUE@	k=0 ; \
@WITH_JACOCO_TRUE@	types=($(ALL_REPRODUCERS)); \
@WITH_JACOCO_TRUE@	for which in "$${types[@]}" ; do \
@WITH_JACOCO_TRUE@	  . $(abs_top_srcdir)/NEW_LINE_IFS ; \
@WITH_JACOCO_TRUE@	  simpleReproducers=(`cat $(abs_top_builddir)/junit-jnlp-dist-$$which.txt `); \
@WITH_JACOCO_TRUE@	  IFS="$$IFS_BACKUP" ; \
@WITH_JACOCO_TRUE@	  for dir in "$${simpleReproducers[@]}" ; do \
@WITH_JACOCO_TRUE@	    testcases_srcs[k]="$(REPRODUCERS_TESTS_SRCDIR)/$$which/$$dir/testcases/" ; \
@WITH_JACOCO_TRUE@	    k=$$((k+1)) ; \
@WITH_JACOCO_TRUE@	    done ; \
@WITH_JACOCO_TRUE@	  done ; \
@WITH_JACOCO_TRUE@	class_names=`cat $(REPRODUCERS_CLASS_NAMES)` ; \
@WITH_JACOCO_TRUE@	$(JACOCO_OPERATOR_EXEC) \
@WITH_JACOCO_TRUE@	  merge --die-soon --input-files $(TEST_EXTENSIONS_DIR)/jacoco-merged-reproducers.exec $(NETX_UNIT_TEST_DIR)/jacoco.exec  --output-file  jacoco-merged.exec; \
@WITH_JACOCO_TRUE@	$(JACOCO_OPERATOR_EXEC) \
@WITH_JACOCO_TRUE@	  report --html-output coverage --xml-output coverage.xml --input-file jacoco-merged.exec \
@WITH_JACOCO_TRUE@	  --input-srcs  $(NETX_SRCDIR) $(PLUGIN_SRCDIR)/java  $(JUNIT_RUNNER_SRCDIR) $(TEST_EXTENSIONS_SRCDIR) $(TEST_EXTENSIONS_TESTS_SRCDIR) "$${testcases_srcs[@]}" \
@WITH_JACOCO_TRUE@	  --input-builds $(NETX_DIR)/lib/classes.jar $(abs_top_builddir)/liveconnect/lib/classes.jar  $(JUNIT_RUNNER_JAR)  $(TEST_EXTENSIONS_DIR) $(TEST_EXTENSIONS_TESTS_DIR) \
@WITH_JACOCO_TRUE@	  --input-srcs  $(NETX_UNIT_TEST_SRCDIR)  \
@WITH_JACOCO_TRUE@	  --input-builds $(NETX_UNIT_TEST_DIR)  \
@WITH_JACOCO_TRUE@	  --title "IcedTea-Web complete codecoverage" ; 
@WITH_JACOCO_FALSE@	echo "Sorry, coverage report cant be run without jacoco installed. Try installing jacoco or specify with-jacoco value" ;
@WITH_JACOCO_FALSE@	exit 5

run-test-code-coverage: stamps/run-unit-test-code-coverage.stamps stamps/run-reproducers-test-code-coverage.stamps
@WITH_EMMA_TRUE@	cd $(TESTS_DIR) ; \
@WITH_EMMA_TRUE@	k=0 ; \
@WITH_EMMA_TRUE@	types=($(ALL_REPRODUCERS)); \
@WITH_EMMA_TRUE@	for which in "$${types[@]}" ; do \
@WITH_EMMA_TRUE@	  . $(abs_top_srcdir)/NEW_LINE_IFS ; \
@WITH_EMMA_TRUE@	  simpleReproducers=(`cat $(abs_top_builddir)/junit-jnlp-dist-$$which.txt `); \
@WITH_EMMA_TRUE@	  IFS="$$IFS_BACKUP" ; \
@WITH_EMMA_TRUE@	  for dir in "$${simpleReproducers[@]}" ; do \
@WITH_EMMA_TRUE@	    testcases_srcs[k]="-sp" ; \
@WITH_EMMA_TRUE@	    k=$$((k+1)) ; \
@WITH_EMMA_TRUE@	    testcases_srcs[k]="$(REPRODUCERS_TESTS_SRCDIR)/$$which/$$dir/testcases/" ; \
@WITH_EMMA_TRUE@	    k=$$((k+1)) ; \
@WITH_EMMA_TRUE@	  done ; \
@WITH_EMMA_TRUE@	done ; \
@WITH_EMMA_TRUE@	$(BOOT_DIR)/bin/java $(EMMA_JAVA_ARGS) -cp $(EMMA_JAR) emma merge \
@WITH_EMMA_TRUE@	 -in $(NETX_UNIT_TEST_DIR)/coverage.es \
@WITH_EMMA_TRUE@	 -in $(TEST_EXTENSIONS_DIR)/coverage.es ; \
@WITH_EMMA_TRUE@	$(BOOT_DIR)/bin/java $(EMMA_JAVA_ARGS) -cp $(EMMA_JAR)  -Demma.report.html.out.encoding=UTF-8 emma report \
@WITH_EMMA_TRUE@	 -Dreport.html.out.encoding=UTF-8 \
@WITH_EMMA_TRUE@	 -in $(TESTS_DIR)/coverage.es \
@WITH_EMMA_TRUE@	 -in $(TESTS_DIR)/coverage.em \
@WITH_EMMA_TRUE@	 -sp $(NETX_SRCDIR) \
@WITH_EMMA_TRUE@	 -sp $(NETX_UNIT_TEST_SRCDIR) \
@WITH_EMMA_TRUE@	 -sp $(JUNIT_RUNNER_SRCDIR) \
@WITH_EMMA_TRUE@	 -sp $(TEST_EXTENSIONS_SRCDIR) \
@WITH_EMMA_TRUE@	 -sp $(TEST_EXTENSIONS_TESTS_SRCDIR) \
@WITH_EMMA_TRUE@	 "$${testcases_srcs[@]}" \
@WITH_EMMA_TRUE@	 -r html \
@WITH_EMMA_TRUE@	 -r xml ; 
@WITH_EMMA_FALSE@	echo "Sorry, coverage report cant be run without emma installed. Try install emma or specify with-emma value" ;
@WITH_EMMA_FALSE@	exit 5

run-test-server-on-44321: stamps/netx.stamp stamps/junit-jnlp-dist-dirs stamps/netx-dist-tests-import-cert-to-public \
 stamps/test-extensions-compile.stamp stamps/compile-reproducers-testcases.stamp $(JUNIT_RUNNER_JAR) stamps/copy-reproducers-resources.stamp
	cd $(TEST_EXTENSIONS_DIR) ; \
	CLASSPATH=$(NETX_DIR)/lib/classes.jar:$(JUNIT_JAR):$(JUNIT_RUNNER_JAR):.:$(TEST_EXTENSIONS_TESTS_DIR) ; \
	  $(BOOT_DIR)/bin/java $(REPRODUCERS_DPARAMETERS) \
	 -Xbootclasspath/a:$(RUNTIME):$$CLASSPATH net.sourceforge.jnlp.ServerAccess

run-test-server-on-random-port: stamps/netx.stamp stamps/junit-jnlp-dist-dirs stamps/netx-dist-tests-import-cert-to-public \
 stamps/test-extensions-compile.stamp stamps/compile-reproducers-testcases.stamp $(JUNIT_RUNNER_JAR) stamps/copy-reproducers-resources.stamp
	cd $(TEST_EXTENSIONS_DIR) ; \
	CLASSPATH=$(NETX_DIR)/lib/classes.jar:$(JUNIT_JAR):$(JUNIT_RUNNER_JAR):.:$(TEST_EXTENSIONS_TESTS_DIR) ; \
	  $(BOOT_DIR)/bin/java $(REPRODUCERS_DPARAMETERS) \
	 -Xbootclasspath/a:$(RUNTIME):$$CLASSPATH net.sourceforge.jnlp.ServerAccess randomport 

clean-netx-tests: clean-netx-unit-tests clean-junit-runner clean-netx-dist-tests clean-test-code-coverage-jacoco clean-test-code-coverage
	if [ -e $(TESTS_DIR)/netx ]; then \
	  rmdir $(TESTS_DIR)/netx ; \
	fi

clean-junit-runner:
	rm -f junit-runner-source-files.txt
	rm -rf $(JUNIT_RUNNER_DIR)
	rm -f $(JUNIT_RUNNER_JAR)

clean-netx-unit-tests: clean_tests_reports
	rm -f netx-unit-tests-source-files.txt
	rm -rf $(NETX_UNIT_TEST_DIR)
	rm -f $(UNIT_CLASS_NAMES)
	rm -f stamps/check-pac-functions.stamp
	rm -f stamps/run-netx-unit-tests.stamp
	rm -f stamps/netx-unit-tests-compile.stamp

clean_tests_reports:
	rm -rf  $(TESTS_DIR)/$(REPORT_STYLES_DIRNAME)/
	rm -f  $(TESTS_DIR)/*.html
	rm -f $(TESTS_DIR)/summary_unit.txt
	rm -f $(TESTS_DIR)/summary_reproducers.txt

clean-$(SOFTKILLER):
	rm -f $(TESTS_DIR)/softkiller

clean-netx-dist-tests: clean_tests_reports netx-dist-tests-remove-cert-from-public clean-custom-reproducers clean-$(SOFTKILLER)
	rm -f test-extensions-source-files.txt
	rm -f test-extensions-tests-source-files.txt
	rm -f $(TEST_EXTENSIONS_COMPATIBILITY_SYMLINK)
	rm -rf $(TEST_EXTENSIONS_TESTS_DIR)
	rm -rf $(REPRODUCERS_BUILD_DIR)
	rm -rf $(REPRODUCERS_TESTS_SERVER_DEPLOYDIR)
	rm -rf $(TEST_EXTENSIONS_DIR)
	rm -f stamps/junit-jnlp-dist-dirs
	rm -f stamps/test-extensions-compile.stamp
	rm -f stamps/test-extensions-tests-compile.stamp
	rm -f stamps/netx-dist-tests-prepare-reproducers.stamp
	rm -f stamps/compile-reproducers-testcases.stamp
	rm -f stamps/copy-reproducers-resources.stamp
	rm -f stamps/netx-dist-tests-sign-some-reproducers.stamp
	rm -f stamps/change-dots-to-paths.stamp
	rm -f junit-jnlp-dist-simple.txt
	rm -f junit-jnlp-dist-custom.txt
	rm -f netx-dist-tests-tests-source-files.txt
	types=($(SIGNED_REPRODUCERS)) ; \
	for which in "$${types[@]}" ; do \
	  rm -f junit-jnlp-dist-$$which.txt ; \
	  rm -f $(EXPORTED_TEST_CERT_PREFIX)_$$which.$(EXPORTED_TEST_CERT_SUFFIX) ; \
	done ;
	rm -f stamps/exported-test-certs.stamp
	rm -f stamps/junit-jnlp-dist-signed.stamp
	rm -f $(REPRODUCERS_CLASS_NAMES)
	rm -f $(abs_top_builddir)/$(PRIVATE_KEYSTORE_NAME)
	rm -f stamps/run-netx-dist-tests.stamp

clean-unit-test-code-coverage:
	if [ -e stamps/run-unit-test-code-coverage.stamp ]; then \
	  rm -rf $(NETX_UNIT_TEST_DIR)/coverage ; \
	  rm -f $(NETX_UNIT_TEST_DIR)/coverage.xml ; \
	  rm -f $(NETX_UNIT_TEST_DIR)/coverageX.es ; \
	  rm -f $(NETX_UNIT_TEST_DIR)/coverageX.ec ; \
	  rm -f $(NETX_UNIT_TEST_DIR)/coverage.es ; \
	  rm -f $(NETX_UNIT_TEST_DIR)/tests-output_withEmma.xml ; \
	  rm -f stamps/run-unit-test-code-coverage.stamp ; \
	fi

clean-reproducers-test-code-coverage:
	if [ -e stamps/run-reproducers-test-code-coverage.stamp ]; then \
	 rm -rf $(TEST_EXTENSIONS_DIR)/coverage ; \
	 rm -f $(TEST_EXTENSIONS_DIR)/coverage.xml ; \
	 rm -f $(TEST_EXTENSIONS_DIR)/coverage.es ; \
	 rm -f $(TEST_EXTENSIONS_DIR)/tests-output_withEmma.xml ; \
	 rm -f stamps/run-reproducers-test-code-coverage.stamp ; \
	fi

clean-test-code-coverage: clean-unit-test-code-coverage clean-reproducers-test-code-coverage
	if [ -e $(TESTS_DIR)/coverage.xml ]; then \
	  rm -rf $(TESTS_DIR)/coverage  ; \
	  rm -f $(TESTS_DIR)/coverage.xml  ; \
	  rm -f $(TESTS_DIR)/coverage.es  ; \
	  rm -f $(TESTS_DIR)/coverage.em ; \
	fi

clean-unit-test-code-coverage-jacoco:
	if [ -e stamps/run-unit-test-code-coverage-jacoco.stamp ]; then \
	  rm -rf $(NETX_UNIT_TEST_DIR)/coverage ; \
	  rm -f $(NETX_UNIT_TEST_DIR)/coverage.xml ; \
	  rm -f $(NETX_UNIT_TEST_DIR)/jacoco.exec ; \
	  rm -f $(NETX_UNIT_TEST_DIR)/tests-output_withEmma.xml ; \
	  rm -f stamps/run-unit-test-code-coverage-jacoco.stamp ; \
	fi	

clean-reproducers-test-code-coverage-jacoco:
	if [ -e stamps/run-reproducers-test-code-coverage-jacoco.stamp ]; then \
	 rm -rf $(TEST_EXTENSIONS_DIR)/coverage-javaws ; \
	 rm -f $(TEST_EXTENSIONS_DIR)/coverage-javaws.xml ; \
	 rm -f $(TEST_EXTENSIONS_DIR)/jacoco_javaws.exec ; \
	 rm -rf $(TEST_EXTENSIONS_DIR)/coverage-plugin ; \
	 rm -f $(TEST_EXTENSIONS_DIR)/coverage-plugin.xml ; \
	 rm -f $(TEST_EXTENSIONS_DIR)/jacoco_plugin.exec ; \
	 rm -rf $(TEST_EXTENSIONS_DIR)/coverage ; \
	 rm -f $(TEST_EXTENSIONS_DIR)/coverage.xml ; \
	 rm -f $(TEST_EXTENSIONS_DIR)/jacoco-merged-reproducers.exec ; \
	 rm -f $(TEST_EXTENSIONS_DIR)/tests-output_withEmma.xml ; \
	 rm -f stamps/run-reproducers-test-code-coverage-jacoco.stamp ; \
	fi

clean-test-code-coverage-jacoco: clean-unit-test-code-coverage-jacoco clean-reproducers-test-code-coverage-jacoco clean-test-code-coverage-tools-jacoco
	if [ -e $(TESTS_DIR)/coverage.xml ]; then \
	  rm -rf $(TESTS_DIR)/coverage  ; \
	  rm -f $(TESTS_DIR)/jacoco-merged.exec; \
	fi

clean-test-code-coverage-tools-jacoco:
	rm -rf  $(JACOCO_OPERATOR_DIR)
	rm -rf  $(COVERABLE_PLUGIN_DIR)
	rm -f stamps/compile-jacoco-operator.stamp;
	rm -f jacoco-operator-source-files.txt
	rm -f stamps/build-fake-plugin.stamp

# plugin tests

@ENABLE_PLUGIN_TRUE@stamps/plugin-tests.stamp: $(PLUGIN_TEST_SRCS) stamps/plugin.stamp
@ENABLE_PLUGIN_TRUE@	mkdir -p plugin/tests/LiveConnect
@ENABLE_PLUGIN_TRUE@	$(BOOT_DIR)/bin/javac $(IT_JAVACFLAGS) \
@ENABLE_PLUGIN_TRUE@	 -d plugin/tests/LiveConnect \
@ENABLE_PLUGIN_TRUE@	 -classpath liveconnect/lib/classes.jar \
@ENABLE_PLUGIN_TRUE@	 $(PLUGIN_TEST_SRCS) ;
@ENABLE_PLUGIN_TRUE@	$(BOOT_DIR)/bin/jar cf plugin/tests/LiveConnect/PluginTest.jar \
@ENABLE_PLUGIN_TRUE@	  plugin/tests/LiveConnect/*.class ;
@ENABLE_PLUGIN_TRUE@	cp -pPR $(SRC_DIR_LINK) $(abs_top_srcdir)/plugin/tests/LiveConnect/*.{js,html} \
@ENABLE_PLUGIN_TRUE@	  plugin/tests/LiveConnect ;
@ENABLE_PLUGIN_TRUE@	echo "Done. Now launch \"firefox file://`pwd`/index.html\"" ;
@ENABLE_PLUGIN_TRUE@	mkdir -p stamps
@ENABLE_PLUGIN_TRUE@	touch stamps/plugin-tests.stamp

# Bootstrap Directory Targets
# ===========================

stamps/native-ecj.stamp: 
	mkdir -p stamps ; \
	if test "x$(GCJ)" != "xno"; then \
	  $(GCJ) $(IT_CFLAGS) -Wl,-Bsymbolic -findirect-dispatch -o native-ecj \
	    --main=org.eclipse.jdt.internal.compiler.batch.Main ${ECJ_JAR} ; \
	fi ; \
	touch stamps/native-ecj.stamp

clean-native-ecj:
	rm -f native-ecj
	rm -rf stamps/native-ecj.stamp

# bootstrap
stamps/bootstrap-directory.stamp: stamps/native-ecj.stamp
	mkdir -p $(BOOT_DIR)/bin stamps/
	ln -sf $(JAVA) $(BOOT_DIR)/bin/java
	ln -sf $(JAR) $(BOOT_DIR)/bin/jar
	ln -sf $(abs_top_builddir)/javac $(BOOT_DIR)/bin/javac
	ln -sf $(JAVADOC) $(BOOT_DIR)/bin/javadoc
	if [ -e "$(KEYTOOL)" ] ; then \
	  ln -sf $(KEYTOOL) $(BOOT_DIR)/bin/keytool ;\
	else \
	  echo "#! /bin/sh" > $(BOOT_DIR)/bin/keytool ;\
	  echo "echo \"keytool not exist on your system, signed part of reproducers test will fail\"" >> $(BOOT_DIR)/bin/keytool ;\
	  chmod 777 $(BOOT_DIR)/bin/keytool ;\
	fi
	if [ -e "$(JARSIGNER)" ] ; then \
	  ln -sf $(JARSIGNER) $(BOOT_DIR)/bin/jarsigner ;\
	else \
	  echo "#! /bin/sh" > $(BOOT_DIR)/bin/jarsigner ;\
	  echo "echo \"jarsigner not exist on your system, signed part of reproducers test will fail\"" >> $(BOOT_DIR)/bin/jarsigner ;\
	  chmod 777 $(BOOT_DIR)/bin/jarsigner ;\
	fi
	mkdir -p $(BOOT_DIR)/jre/lib && \
	ln -s $(SYSTEM_JRE_DIR)/lib/rt.jar $(BOOT_DIR)/jre/lib && \
	if [ -e $(SYSTEM_JRE_DIR)/lib/jsse.jar ] ; then \
	  ln -s $(SYSTEM_JRE_DIR)/lib/jsse.jar $(BOOT_DIR)/jre/lib ; \
	else \
	  ln -s rt.jar $(BOOT_DIR)/jre/lib/jsse.jar ; \
	fi
	if [ -e $(SYSTEM_JRE_DIR)/lib/resources.jar ] ; then \
	  ln -s $(SYSTEM_JRE_DIR)/lib/resources.jar $(BOOT_DIR)/jre/lib ; \
	else \
	  ln -s rt.jar $(BOOT_DIR)/jre/lib/resources.jar ; \
	fi
	ln -sf $(SYSTEM_JRE_DIR)/lib/$(JRE_ARCH_DIR) \
	  $(BOOT_DIR)/jre/lib/ && \
	if ! test -d $(BOOT_DIR)/jre/lib/$(INSTALL_ARCH_DIR); \
	  then \
	  ln -sf ./$(JRE_ARCH_DIR) \
	    $(BOOT_DIR)/jre/lib/$(INSTALL_ARCH_DIR); \
	fi;
	mkdir -p $(BOOT_DIR)/include && \
	for i in $(SYSTEM_JDK_DIR)/include/*; do \
	  test -r $$i | continue; \
	  i=`basename $$i`; \
	  rm -f $(BOOT_DIR)/include/$$i; \
	  ln -s $(SYSTEM_JDK_DIR)/include/$$i $(BOOT_DIR)/include/$$i; \
	done
	mkdir -p stamps
	touch stamps/bootstrap-directory.stamp

clean-bootstrap-directory:
	rm -rf $(BOOT_DIR)
	if [ -e ${abs_top_builddir}/bootstrap ] ; then \
	  rmdir ${abs_top_builddir}/bootstrap ; \
	fi
	rm -f stamps/bootstrap-directory.stamp

# Target Aliases
# ===============

add-netx: stamps/add-netx.stamp

add-netx-debug: stamps/add-netx-debug.stamp

netx: stamps/netx.stamp

netx-dist: stamps/netx-dist.stamp

plugin: stamps/plugin.stamp

plugin-tests: stamps/plugin-tests.stamp

check-pac-functions: stamps/check-pac-functions.stamp

run-netx-unit-tests: stamps/run-netx-unit-tests.stamp

links: stamps/global-links.stamp

user-links: stamps/user-links.stamp

run-netx-dist-tests: stamps/run-netx-dist-tests.stamp

run-unit-test-code-coverage: stamps/run-unit-test-code-coverage.stamp

run-reproducers-test-code-coverage: stamps/run-reproducers-test-code-coverage.stamp

run-unit-test-code-coverage-jacoco: stamps/run-unit-test-code-coverage-jacoco.stamp

run-reproducers-test-code-coverage-jacoco: stamps/run-reproducers-test-code-coverage-jacoco.stamp

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
